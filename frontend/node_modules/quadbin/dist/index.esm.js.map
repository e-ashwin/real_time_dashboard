{"version":3,"file":"index.esm.js","sources":["../src/index.ts"],"sourcesContent":["import {tiles} from '@mapbox/tile-cover';\nimport {worldToLngLat} from '@math.gl/web-mercator';\nimport type {Polygon} from 'geojson';\n\nconst B = [\n  0x5555555555555555n,\n  0x3333333333333333n,\n  0x0f0f0f0f0f0f0f0fn,\n  0x00ff00ff00ff00ffn,\n  0x0000ffff0000ffffn,\n  0x00000000ffffffffn\n];\nconst S = [0n, 1n, 2n, 4n, 8n, 16n];\n\ntype Quadbin = bigint;\ntype Tile = {x: number; y: number; z: number};\n\nconst TILE_SIZE = 512;\n\nexport function cellToOffset(quadbin: Quadbin): [number, number, number] {\n  const {x, y, z} = cellToTile(quadbin);\n  const scale = TILE_SIZE / (1 << z);\n  return [x * scale, TILE_SIZE - y * scale, scale];\n}\n\nexport function cellToWorldBounds(quadbin: Quadbin, coverage: number): [number[], number[]] {\n  const [xOffset, yOffset, scale] = cellToOffset(quadbin);\n  return [\n    [xOffset, yOffset],\n    [xOffset + coverage * scale, yOffset - coverage * scale]\n  ];\n}\n\nexport function getCellPolygon(quadbin: Quadbin, coverage = 1): number[] {\n  const [topLeft, bottomRight] = cellToWorldBounds(quadbin, coverage);\n  const [w, n] = worldToLngLat(topLeft);\n  const [e, s] = worldToLngLat(bottomRight);\n  return [e, n, e, s, w, s, w, n, e, n];\n}\n\nexport function hexToBigInt(hex: string): bigint {\n  return BigInt(`0x${hex}`);\n}\n\nexport function bigIntToHex(index: bigint): string {\n  return index.toString(16);\n}\n\nexport function tileToCell(tile: Tile): Quadbin {\n  if (tile.z < 0 || tile.z > 26) {\n    throw new Error('Wrong zoom');\n  }\n  const z = BigInt(tile.z);\n  let x = BigInt(tile.x) << (32n - z);\n  let y = BigInt(tile.y) << (32n - z);\n\n  for (let i = 0; i < 5; i++) {\n    const s = S[5 - i];\n    const b = B[4 - i];\n    x = (x | (x << s)) & b;\n    y = (y | (y << s)) & b;\n  }\n\n  const quadbin =\n    0x4000000000000000n |\n    (1n << 59n) | // | (mode << 59) | (mode_dep << 57)\n    (z << 52n) |\n    ((x | (y << 1n)) >> 12n) |\n    (0xfffffffffffffn >> (z * 2n));\n  return quadbin;\n}\n\nexport function cellToTile(quadbin: Quadbin): Tile {\n  const mode = (quadbin >> 59n) & 7n;\n  const modeDep = (quadbin >> 57n) & 3n;\n  const z = (quadbin >> 52n) & 0x1fn;\n  const q = (quadbin & 0xfffffffffffffn) << 12n;\n\n  if (mode !== 1n && modeDep !== 0n) {\n    throw new Error('Wrong mode');\n  }\n\n  let x = q;\n  let y = q >> 1n;\n\n  for (let i = 0; i < 6; i++) {\n    const s = S[i];\n    const b = B[i];\n    x = (x | (x >> s)) & b;\n    y = (y | (y >> s)) & b;\n  }\n\n  x = x >> (32n - z);\n  y = y >> (32n - z);\n\n  return {z: Number(z), x: Number(x), y: Number(y)};\n}\n\nexport function getResolution(quadbin: Quadbin): bigint {\n  return (quadbin >> 52n) & 0x1fn;\n}\n\nexport function cellToParent(quadbin: Quadbin): Quadbin {\n  const zparent = getResolution(quadbin) - 1n;\n  const parent =\n    (quadbin & ~(0x1fn << 52n)) | (zparent << 52n) | (0xfffffffffffffn >> (zparent * 2n));\n  return parent;\n}\n\n/**\n * Returns the children of a cell.\n *\n * @privateRemarks Order of the child cells would, preferably, be\n *  row-major starting from NW and ending at SE.\n */\nexport function cellToChildren(quadbin: Quadbin, resolution: bigint): Quadbin[] {\n  if (resolution < 0 || resolution > 26 || resolution < getResolution(quadbin)) {\n    throw new Error('Invalid resolution');\n  }\n\n  const zoomLevelMask = ~(0x1fn << 52n);\n  const blockRange = 1n << ((resolution - ((quadbin >> 52n) & 0x1fn)) << 1n);\n  const sqrtBlockRange = 1n << (resolution - ((quadbin >> 52n) & 0x1fn));\n  const blockShift = 52n - (resolution << 1n);\n\n  const childBase =\n    ((quadbin & zoomLevelMask) | (resolution << 52n)) & ~((blockRange - 1n) << blockShift);\n\n  const children: Quadbin[] = [];\n  for (let blockRow = 0n; blockRow < sqrtBlockRange; blockRow++) {\n    for (let blockColumn = 0n; blockColumn < sqrtBlockRange; blockColumn++) {\n      children.push(childBase | ((blockRow * sqrtBlockRange + blockColumn) << blockShift));\n    }\n  }\n\n  return children;\n}\n\nexport function geometryToCells(geometry, resolution: bigint): Quadbin[] {\n  const zoom = Number(resolution);\n  return tiles(geometry, {\n    min_zoom: zoom,\n    max_zoom: zoom\n  }).map(([x, y, z]) => tileToCell({x, y, z}));\n}\n\nexport function cellToBoundary(cell: Quadbin): Polygon {\n  const bbox = getCellPolygon(cell);\n  const boundary = [\n    [bbox[0], bbox[1]],\n    [bbox[2], bbox[3]],\n    [bbox[4], bbox[5]],\n    [bbox[6], bbox[7]],\n    [bbox[0], bbox[1]]\n  ];\n\n  return {type: 'Polygon', coordinates: [boundary]};\n}\n"],"names":["B","S","TILE_SIZE","cellToOffset","quadbin","x","y","z","cellToTile","scale","cellToWorldBounds","coverage","xOffset","yOffset","getCellPolygon","topLeft","bottomRight","w","n","worldToLngLat","e","s","hexToBigInt","hex","BigInt","bigIntToHex","index","toString","tileToCell","tile","Error","i","b","mode","modeDep","q","Number","getResolution","cellToParent","zparent","parent","cellToChildren","resolution","zoomLevelMask","blockRange","sqrtBlockRange","blockShift","childBase","children","blockRow","blockColumn","push","geometryToCells","geometry","zoom","tiles","min_zoom","max_zoom","map","cellToBoundary","cell","bbox","boundary","type","coordinates"],"mappings":"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"}