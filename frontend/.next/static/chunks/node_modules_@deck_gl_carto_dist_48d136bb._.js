(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push(["static/chunks/node_modules_@deck_gl_carto_dist_48d136bb._.js", {

"[project]/node_modules/@deck.gl/carto/dist/layers/cluster-utils.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_context__.s({
    "aggregateTile": (()=>aggregateTile),
    "clustersToBinary": (()=>clustersToBinary),
    "computeAggregationStats": (()=>computeAggregationStats),
    "extractAggregationProperties": (()=>extractAggregationProperties)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$quadbin$2f$dist$2f$index$2e$esm$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/quadbin/dist/index.esm.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$log$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__log$3e$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/core/dist/utils/log.js [client] (ecmascript) <export default as log>");
;
;
function aggregateTile(tile, tileAggregationCache, aggregationLevels, properties = [], getPosition, getWeight) {
    if (!tile.content) return false;
    // Aggregate on demand and cache result
    if (!tile.userData) tile.userData = {};
    const cell0 = tileAggregationCache.get(aggregationLevels)?.[0];
    if (cell0) {
        // Have already aggregated this tile
        if (properties.every((property)=>property.name in cell0)) {
            // Use cached result
            return false;
        }
        // Aggregated properties have changed, re-aggregate
        tileAggregationCache.clear();
    }
    const out = {};
    for (const cell of tile.content){
        let id = cell.id;
        const position = typeof getPosition === 'function' ? getPosition(cell, {}) : getPosition;
        // Aggregate by parent rid
        for(let i = 0; i < aggregationLevels - 1; i++){
            id = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$quadbin$2f$dist$2f$index$2e$esm$2e$js__$5b$client$5d$__$28$ecmascript$29$__["cellToParent"])(id);
        }
        // Unfortunately TS doesn't support Record<bigint, any>
        // https://github.com/microsoft/TypeScript/issues/46395
        const parentId = Number(id);
        if (!(parentId in out)) {
            out[parentId] = {
                id,
                count: 0,
                position: [
                    0,
                    0
                ]
            };
            for (const { name, aggregation } of properties){
                if (aggregation === 'any') {
                    // Just pick first value for ANY
                    out[parentId][name] = cell.properties[name];
                } else {
                    out[parentId][name] = 0;
                }
            }
        }
        // Layout props
        const prevTotalW = out[parentId].count;
        out[parentId].count += typeof getWeight === 'function' ? getWeight(cell, {}) : getWeight;
        const totalW = out[parentId].count;
        const W = totalW - prevTotalW;
        out[parentId].position[0] = (prevTotalW * out[parentId].position[0] + W * position[0]) / totalW;
        out[parentId].position[1] = (prevTotalW * out[parentId].position[1] + W * position[1]) / totalW;
        // Re-aggregate other properties so clusters can be styled
        for (const { name, aggregation } of properties){
            const prevValue = out[parentId][name];
            const value = cell.properties[name];
            if (aggregation === 'average') {
                out[parentId][name] = (prevTotalW * prevValue + W * value) / totalW;
            } else if (aggregation === 'count' || aggregation === 'sum') {
                out[parentId][name] = prevValue + value;
            } else if (aggregation === 'max') {
                out[parentId][name] = Math.max(prevValue, value);
            } else if (aggregation === 'min') {
                out[parentId][name] = Math.min(prevValue, value);
            }
        }
    }
    tileAggregationCache.set(aggregationLevels, Object.values(out));
    return true;
}
function extractAggregationProperties(tile) {
    const properties = [];
    const validAggregations = [
        'any',
        'average',
        'count',
        'min',
        'max',
        'sum'
    ];
    for (const name of Object.keys(tile.content[0].properties)){
        let aggregation = name.split('_').pop().toLowerCase();
        if (!validAggregations.includes(aggregation)) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$log$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__log$3e$__["log"].warn(`No valid aggregation present in ${name} property`)();
            aggregation = 'any';
        }
        properties.push({
            name: name,
            aggregation
        });
    }
    return properties;
}
function computeAggregationStats(data, properties) {
    const stats = {};
    for (const { name, aggregation } of properties){
        stats[name] = {
            min: Infinity,
            max: -Infinity
        };
        if (aggregation !== 'any') {
            for (const d of data){
                stats[name].min = Math.min(stats[name].min, d[name]);
                stats[name].max = Math.max(stats[name].max, d[name]);
            }
        }
    }
    return stats;
}
const EMPTY_UINT16ARRAY = new Uint16Array();
const EMPTY_BINARY_PROPS = {
    positions: {
        value: new Float32Array(),
        size: 2
    },
    properties: [],
    numericProps: {},
    featureIds: {
        value: EMPTY_UINT16ARRAY,
        size: 1
    },
    globalFeatureIds: {
        value: EMPTY_UINT16ARRAY,
        size: 1
    }
};
function clustersToBinary(data) {
    const positions = new Float32Array(data.length * 2);
    const featureIds = new Uint16Array(data.length);
    for(let i = 0; i < data.length; i++){
        positions.set(data[i].position, 2 * i);
        featureIds[i] = i;
    }
    return {
        shape: 'binary-feature-collection',
        points: {
            type: 'Point',
            positions: {
                value: positions,
                size: 2
            },
            properties: data,
            numericProps: {},
            featureIds: {
                value: featureIds,
                size: 1
            },
            globalFeatureIds: {
                value: featureIds,
                size: 1
            }
        },
        lines: {
            type: 'LineString',
            pathIndices: {
                value: EMPTY_UINT16ARRAY,
                size: 1
            },
            ...EMPTY_BINARY_PROPS
        },
        polygons: {
            type: 'Polygon',
            polygonIndices: {
                value: EMPTY_UINT16ARRAY,
                size: 1
            },
            primitivePolygonIndices: {
                value: EMPTY_UINT16ARRAY,
                size: 1
            },
            ...EMPTY_BINARY_PROPS
        }
    };
} //# sourceMappingURL=cluster-utils.js.map
}}),
"[project]/node_modules/@deck.gl/carto/dist/constants.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_context__.s({
    "DEFAULT_TILE_SIZE": (()=>DEFAULT_TILE_SIZE)
});
const DEFAULT_TILE_SIZE = 512; //# sourceMappingURL=constants.js.map
}}),
"[project]/node_modules/@deck.gl/carto/dist/layers/quadbin-tileset-2d.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_context__.s({
    "default": (()=>QuadbinTileset2D)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$geo$2d$layers$2f$dist$2f$tileset$2d$2d$2f$tileset$2d$2d$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__Tileset2D__as__$5f$Tileset2D$3e$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/geo-layers/dist/tileset-2d/tileset-2d.js [client] (ecmascript) <export Tileset2D as _Tileset2D>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$quadbin$2f$dist$2f$index$2e$esm$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/quadbin/dist/index.esm.js [client] (ecmascript)");
;
;
class QuadbinTileset2D extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$geo$2d$layers$2f$dist$2f$tileset$2d$2d$2f$tileset$2d$2d$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__Tileset2D__as__$5f$Tileset2D$3e$__["_Tileset2D"] {
    // @ts-expect-error for spatial indices, TileSet2d should be parametrized by TileIndexT
    getTileIndices(opts) {
        return super.getTileIndices(opts).map(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$quadbin$2f$dist$2f$index$2e$esm$2e$js__$5b$client$5d$__$28$ecmascript$29$__["tileToCell"]).map((q)=>({
                q,
                i: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$quadbin$2f$dist$2f$index$2e$esm$2e$js__$5b$client$5d$__$28$ecmascript$29$__["bigIntToHex"])(q)
            }));
    }
    // @ts-expect-error TileIndex must be generic
    getTileId({ q, i }) {
        return i || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$quadbin$2f$dist$2f$index$2e$esm$2e$js__$5b$client$5d$__$28$ecmascript$29$__["bigIntToHex"])(q);
    }
    // @ts-expect-error TileIndex must be generic
    getTileMetadata({ q }) {
        return super.getTileMetadata((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$quadbin$2f$dist$2f$index$2e$esm$2e$js__$5b$client$5d$__$28$ecmascript$29$__["cellToTile"])(q));
    }
    // @ts-expect-error TileIndex must be generic
    getTileZoom({ q }) {
        return Number((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$quadbin$2f$dist$2f$index$2e$esm$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getResolution"])(q));
    }
    // @ts-expect-error TileIndex must be generic
    getParentIndex({ q }) {
        return {
            q: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$quadbin$2f$dist$2f$index$2e$esm$2e$js__$5b$client$5d$__$28$ecmascript$29$__["cellToParent"])(q)
        };
    }
} //# sourceMappingURL=quadbin-tileset-2d.js.map
}}),
"[project]/node_modules/@deck.gl/carto/dist/layers/quadbin-utils.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_context__.s({
    "getQuadbinPolygon": (()=>getQuadbinPolygon),
    "quadbinToOffset": (()=>quadbinToOffset),
    "quadbinToWorldBounds": (()=>quadbinToWorldBounds)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$web$2d$mercator$2f$dist$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@math.gl/web-mercator/dist/index.js [client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$web$2d$mercator$2f$dist$2f$web$2d$mercator$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@math.gl/web-mercator/dist/web-mercator-utils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$quadbin$2f$dist$2f$index$2e$esm$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/quadbin/dist/index.esm.js [client] (ecmascript)");
;
;
const TILE_SIZE = 512;
function quadbinToOffset(quadbin) {
    const { x, y, z } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$quadbin$2f$dist$2f$index$2e$esm$2e$js__$5b$client$5d$__$28$ecmascript$29$__["cellToTile"])(quadbin);
    const scale = TILE_SIZE / (1 << z);
    return [
        x * scale,
        TILE_SIZE - y * scale,
        scale
    ];
}
function quadbinToWorldBounds(quadbin, coverage) {
    const [xOffset, yOffset, scale] = quadbinToOffset(quadbin);
    return [
        [
            xOffset,
            yOffset
        ],
        [
            xOffset + coverage * scale,
            yOffset - coverage * scale
        ]
    ];
}
function getQuadbinPolygon(quadbin, coverage = 1) {
    const [topLeft, bottomRight] = quadbinToWorldBounds(quadbin, coverage);
    const [w, n] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$web$2d$mercator$2f$dist$2f$web$2d$mercator$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["worldToLngLat"])(topLeft);
    const [e, s] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$math$2e$gl$2f$web$2d$mercator$2f$dist$2f$web$2d$mercator$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["worldToLngLat"])(bottomRight);
    return [
        e,
        n,
        e,
        s,
        w,
        s,
        w,
        n,
        e,
        n
    ];
} //# sourceMappingURL=quadbin-utils.js.map
}}),
"[project]/node_modules/@deck.gl/carto/dist/layers/schema/fast-pbf.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_context__.s({
    "readPackedTypedArray": (()=>readPackedTypedArray)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$loaders$2e$gl$2f$compression$2f$dist$2f$lib$2f$gzip$2d$compression$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@loaders.gl/compression/dist/lib/gzip-compression.js [client] (ecmascript)");
;
function readPackedTypedArray(TypedArray, pbf, obj, options) {
    const end = pbf.type === 2 ? pbf.readVarint() + pbf.pos : pbf.pos + 1;
    const data = pbf.buf.buffer.slice(pbf.pos, end);
    if (options?.compression === 'gzip') {
        const compression = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$loaders$2e$gl$2f$compression$2f$dist$2f$lib$2f$gzip$2d$compression$2e$js__$5b$client$5d$__$28$ecmascript$29$__["GZipCompression"]();
        const decompressedData = compression.decompressSync(data);
        obj.value = new TypedArray(decompressedData);
    } else {
        obj.value = new TypedArray(data);
    }
    pbf.pos = end;
    return obj.value;
} //# sourceMappingURL=fast-pbf.js.map
}}),
"[project]/node_modules/@deck.gl/carto/dist/layers/schema/carto-tile.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_context__.s({
    "NumericPropKeyValueReader": (()=>NumericPropKeyValueReader),
    "PropertiesReader": (()=>PropertiesReader),
    "TileReader": (()=>TileReader)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$schema$2f$fast$2d$pbf$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/schema/fast-pbf.js [client] (ecmascript)");
;
class KeyValueObjectReader {
    static read(pbf, end) {
        return pbf.readFields(KeyValueObjectReader._readField, {
            key: '',
            value: null
        }, end);
    }
    static _readField(tag, obj, pbf) {
        if (tag === 1) obj.key = pbf.readString();
        else if (tag === 2) obj.value = pbf.readString();
    }
}
class PropertiesReader {
    static read(pbf, end) {
        return pbf.readFields(PropertiesReader._readField, {}, end);
    }
    static _readField(tag, obj, pbf) {
        if (tag === 1) {
            const { key, value } = KeyValueObjectReader.read(pbf, pbf.readVarint() + pbf.pos);
            obj[key] = value;
        }
    }
}
class DoublesReader {
    static read(pbf, end) {
        const { value, size } = pbf.readFields(DoublesReader._readField, {
            value: [],
            size: 0
        }, end);
        return {
            value,
            size
        };
    }
    static _readField(tag, obj, pbf) {
        if (tag === 1) (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$schema$2f$fast$2d$pbf$2e$js__$5b$client$5d$__$28$ecmascript$29$__["readPackedTypedArray"])(Float64Array, pbf, obj);
        else if (tag === 2) obj.size = pbf.readVarint(true);
    }
}
class IntsReader {
    static read(pbf, end) {
        const { value, size } = pbf.readFields(IntsReader._readField, {
            value: [],
            size: 0
        }, end);
        return {
            value: new Uint32Array(value),
            size
        };
    }
    static _readField(tag, obj, pbf) {
        if (tag === 1) pbf.readPackedVarint(obj.value);
        else if (tag === 2) obj.size = pbf.readVarint(true);
    }
}
class FieldsReader {
    static read(pbf, end) {
        return pbf.readFields(FieldsReader._readField, {
            id: 0
        }, end);
    }
    static _readField(tag, obj, pbf) {
        if (tag === 1) obj.id = pbf.readVarint();
    }
}
class NumericPropReader {
    static read(pbf, end) {
        return pbf.readFields(NumericPropReader._readField, {
            value: []
        }, end);
    }
    static _readField(tag, obj, pbf) {
        if (tag === 1) (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$schema$2f$fast$2d$pbf$2e$js__$5b$client$5d$__$28$ecmascript$29$__["readPackedTypedArray"])(Float64Array, pbf, obj);
    }
}
class NumericPropKeyValueReader {
    static read(pbf, end) {
        return pbf.readFields(NumericPropKeyValueReader._readField, {
            key: '',
            value: null
        }, end);
    }
    static _readField(tag, obj, pbf) {
        if (tag === 1) obj.key = pbf.readString();
        else if (tag === 2) obj.value = NumericPropReader.read(pbf, pbf.readVarint() + pbf.pos);
    }
}
class PointsReader {
    static read(pbf, end) {
        return pbf.readFields(PointsReader._readField, {
            positions: null,
            globalFeatureIds: null,
            featureIds: null,
            properties: [],
            numericProps: {},
            fields: []
        }, end);
    }
    static _readField(tag, obj, pbf) {
        if (tag === 1) obj.positions = DoublesReader.read(pbf, pbf.readVarint() + pbf.pos);
        else if (tag === 2) obj.globalFeatureIds = IntsReader.read(pbf, pbf.readVarint() + pbf.pos);
        else if (tag === 3) obj.featureIds = IntsReader.read(pbf, pbf.readVarint() + pbf.pos);
        else if (tag === 4) obj.properties.push(PropertiesReader.read(pbf, pbf.readVarint() + pbf.pos));
        else if (tag === 5) {
            const entry = NumericPropKeyValueReader.read(pbf, pbf.readVarint() + pbf.pos);
            obj.numericProps[entry.key] = entry.value;
        } else if (tag === 6) obj.fields.push(FieldsReader.read(pbf, pbf.readVarint() + pbf.pos));
    }
}
// Lines ========================================
class LinesReader {
    static read(pbf, end) {
        return pbf.readFields(LinesReader._readField, {
            positions: null,
            pathIndices: null,
            globalFeatureIds: null,
            featureIds: null,
            properties: [],
            numericProps: {},
            fields: []
        }, end);
    }
    static _readField(tag, obj, pbf) {
        if (tag === 1) obj.positions = DoublesReader.read(pbf, pbf.readVarint() + pbf.pos);
        else if (tag === 2) obj.pathIndices = IntsReader.read(pbf, pbf.readVarint() + pbf.pos);
        else if (tag === 3) obj.globalFeatureIds = IntsReader.read(pbf, pbf.readVarint() + pbf.pos);
        else if (tag === 4) obj.featureIds = IntsReader.read(pbf, pbf.readVarint() + pbf.pos);
        else if (tag === 5) obj.properties.push(PropertiesReader.read(pbf, pbf.readVarint() + pbf.pos));
        else if (tag === 6) {
            const entry = NumericPropKeyValueReader.read(pbf, pbf.readVarint() + pbf.pos);
            obj.numericProps[entry.key] = entry.value;
        } else if (tag === 7) obj.fields.push(FieldsReader.read(pbf, pbf.readVarint() + pbf.pos));
    }
}
class PolygonsReader {
    static read(pbf, end) {
        return pbf.readFields(PolygonsReader._readField, {
            positions: null,
            polygonIndices: null,
            globalFeatureIds: null,
            featureIds: null,
            primitivePolygonIndices: null,
            triangles: null,
            properties: [],
            numericProps: {},
            fields: []
        }, end);
    }
    static _readField(tag, obj, pbf) {
        if (tag === 1) obj.positions = DoublesReader.read(pbf, pbf.readVarint() + pbf.pos);
        else if (tag === 2) obj.polygonIndices = IntsReader.read(pbf, pbf.readVarint() + pbf.pos);
        else if (tag === 3) obj.globalFeatureIds = IntsReader.read(pbf, pbf.readVarint() + pbf.pos);
        else if (tag === 4) obj.featureIds = IntsReader.read(pbf, pbf.readVarint() + pbf.pos);
        else if (tag === 5) obj.primitivePolygonIndices = IntsReader.read(pbf, pbf.readVarint() + pbf.pos);
        else if (tag === 6) obj.triangles = IntsReader.read(pbf, pbf.readVarint() + pbf.pos);
        else if (tag === 7) obj.properties.push(PropertiesReader.read(pbf, pbf.readVarint() + pbf.pos));
        else if (tag === 8) {
            const entry = NumericPropKeyValueReader.read(pbf, pbf.readVarint() + pbf.pos);
            obj.numericProps[entry.key] = entry.value;
        } else if (tag === 9) obj.fields.push(FieldsReader.read(pbf, pbf.readVarint() + pbf.pos));
    }
}
class TileReader {
    static read(pbf, end) {
        return pbf.readFields(TileReader._readField, {
            points: null,
            lines: null,
            polygons: null
        }, end);
    }
    static _readField(tag, obj, pbf) {
        if (tag === 1) obj.points = PointsReader.read(pbf, pbf.readVarint() + pbf.pos);
        else if (tag === 2) obj.lines = LinesReader.read(pbf, pbf.readVarint() + pbf.pos);
        else if (tag === 3) obj.polygons = PolygonsReader.read(pbf, pbf.readVarint() + pbf.pos);
    }
} //# sourceMappingURL=carto-tile.js.map
}}),
"[project]/node_modules/@deck.gl/carto/dist/layers/schema/carto-spatial-tile.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_context__.s({
    "IndicesReader": (()=>IndicesReader),
    "TileReader": (()=>TileReader)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$schema$2f$fast$2d$pbf$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/schema/fast-pbf.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$schema$2f$carto$2d$tile$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/schema/carto-tile.js [client] (ecmascript)");
;
;
class IndicesReader {
    static read(pbf, end) {
        return pbf.readFields(IndicesReader._readField, {
            value: []
        }, end);
    }
    static _readField(tag, obj, pbf) {
        if (tag === 1) (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$schema$2f$fast$2d$pbf$2e$js__$5b$client$5d$__$28$ecmascript$29$__["readPackedTypedArray"])(BigUint64Array, pbf, obj);
    }
}
class CellsReader {
    static read(pbf, end) {
        return pbf.readFields(CellsReader._readField, {
            indices: null,
            properties: [],
            numericProps: {}
        }, end);
    }
    static _readField(tag, obj, pbf) {
        if (tag === 1) obj.indices = IndicesReader.read(pbf, pbf.readVarint() + pbf.pos);
        else if (tag === 2) obj.properties.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$schema$2f$carto$2d$tile$2e$js__$5b$client$5d$__$28$ecmascript$29$__["PropertiesReader"].read(pbf, pbf.readVarint() + pbf.pos));
        else if (tag === 3) {
            const entry = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$schema$2f$carto$2d$tile$2e$js__$5b$client$5d$__$28$ecmascript$29$__["NumericPropKeyValueReader"].read(pbf, pbf.readVarint() + pbf.pos);
            obj.numericProps[entry.key] = entry.value;
        }
    }
}
class TileReader {
    static read(pbf, end) {
        return pbf.readFields(TileReader._readField, {
            scheme: 0,
            cells: null
        }, end);
    }
    static _readField(tag, obj, pbf) {
        if (tag === 1) obj.scheme = pbf.readVarint();
        else if (tag === 2) obj.cells = CellsReader.read(pbf, pbf.readVarint() + pbf.pos);
    }
} //# sourceMappingURL=carto-spatial-tile.js.map
}}),
"[project]/node_modules/@deck.gl/carto/dist/layers/schema/tile-loader-utils.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_context__.s({
    "parsePbf": (()=>parsePbf)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pbf$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/pbf/index.js [client] (ecmascript)");
;
function parsePbf(buffer, TileReader) {
    const pbf = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pbf$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"](buffer);
    const tile = TileReader.read(pbf);
    return tile;
} //# sourceMappingURL=tile-loader-utils.js.map
}}),
"[project]/node_modules/@deck.gl/carto/dist/utils.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_context__.s({
    "assert": (()=>assert),
    "createBinaryProxy": (()=>createBinaryProxy),
    "getWorkerUrl": (()=>getWorkerUrl),
    "isObject": (()=>isObject),
    "isPureObject": (()=>isPureObject),
    "scaleIdentity": (()=>scaleIdentity)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$log$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__log$3e$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/core/dist/utils/log.js [client] (ecmascript) <export default as log>");
;
function assert(condition, message) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$log$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__log$3e$__["log"].assert(condition, message);
}
function createBinaryProxy(data, index) {
    const { properties, numericProps } = data;
    return new Proxy(properties[index] || {}, {
        get (target, property) {
            if (property in numericProps) {
                return numericProps[property].value[index];
            }
            return target[property];
        },
        has (target, property) {
            return property in numericProps || property in target;
        },
        ownKeys (target) {
            return [
                ...Object.keys(numericProps),
                ...Reflect.ownKeys(target)
            ];
        },
        getOwnPropertyDescriptor (target, prop) {
            return {
                enumerable: true,
                configurable: true
            };
        }
    });
}
function getWorkerUrl(id, version) {
    // For local testing `yarn build-workers` and then host `modules/carto/dist/`
    // return `http://localhost:8081/dist/${id}-worker.js`;
    return `https://unpkg.com/@deck.gl/carto@${version}/dist/${id}-worker.js`;
}
function scaleIdentity() {
    let unknown;
    function scale(x) {
        return x === null ? unknown : x;
    }
    scale.invert = scale;
    scale.domain = scale.range = (d)=>d;
    scale.unknown = (u)=>{
        if (u) {
            unknown = u;
        }
        return unknown;
    };
    scale.copy = ()=>{
        const scaleCopy = scaleIdentity();
        scaleCopy.unknown(unknown);
        return scaleCopy;
    };
    return scale;
}
const isObject = (x)=>x !== null && typeof x === 'object';
const isPureObject = (x)=>isObject(x) && x.constructor === ({}).constructor; //# sourceMappingURL=utils.js.map
}}),
"[project]/node_modules/@deck.gl/carto/dist/layers/schema/spatialjson-utils.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_context__.s({
    "binaryToSpatialjson": (()=>binaryToSpatialjson)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$quadbin$2f$dist$2f$index$2e$esm$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/quadbin/dist/index.esm.js [client] (ecmascript)");
;
function binaryToSpatialjson(binary) {
    const { cells, scheme } = binary;
    const count = cells.indices.value.length;
    const spatial = [];
    for(let i = 0; i < count; i++){
        const id = scheme === 'h3' ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$quadbin$2f$dist$2f$index$2e$esm$2e$js__$5b$client$5d$__$28$ecmascript$29$__["bigIntToHex"])(cells.indices.value[i]) : cells.indices.value[i];
        const properties = {
            ...cells.properties[i]
        };
        for (const key of Object.keys(cells.numericProps)){
            properties[key] = cells.numericProps[key].value[i];
        }
        spatial.push({
            id,
            properties
        });
    }
    return spatial;
} //# sourceMappingURL=spatialjson-utils.js.map
}}),
"[project]/node_modules/@deck.gl/carto/dist/layers/schema/carto-spatial-tile-loader.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$schema$2f$carto$2d$spatial$2d$tile$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/schema/carto-spatial-tile.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$schema$2f$tile$2d$loader$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/schema/tile-loader-utils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/utils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$schema$2f$spatialjson$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/schema/spatialjson-utils.js [client] (ecmascript)");
;
;
;
;
const VERSION = typeof "9.1.8" !== 'undefined' ? "9.1.8" : 'latest';
const id = 'cartoSpatialTile';
const DEFAULT_OPTIONS = {
    cartoSpatialTile: {
        scheme: 'quadbin',
        workerUrl: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getWorkerUrl"])(id, VERSION)
    }
};
const CartoSpatialTileLoader = {
    name: 'CARTO Spatial Tile',
    version: VERSION,
    id,
    module: 'carto',
    extensions: [
        'pbf'
    ],
    mimeTypes: [
        'application/vnd.carto-spatial-tile'
    ],
    category: 'geometry',
    parse: async (arrayBuffer, options)=>parseCartoSpatialTile(arrayBuffer, options),
    parseSync: parseCartoSpatialTile,
    worker: true,
    options: DEFAULT_OPTIONS
};
function parseCartoSpatialTile(arrayBuffer, options) {
    if (!arrayBuffer) return null;
    const tile = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$schema$2f$tile$2d$loader$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["parsePbf"])(arrayBuffer, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$schema$2f$carto$2d$spatial$2d$tile$2e$js__$5b$client$5d$__$28$ecmascript$29$__["TileReader"]);
    const { cells } = tile;
    const scheme = options?.cartoSpatialTile?.scheme;
    const data = {
        cells,
        scheme
    };
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$schema$2f$spatialjson$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["binaryToSpatialjson"])(data);
}
const __TURBOPACK__default__export__ = CartoSpatialTileLoader;
 //# sourceMappingURL=carto-spatial-tile-loader.js.map
}}),
"[project]/node_modules/@deck.gl/carto/dist/layers/utils.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_context__.s({
    "TilejsonPropType": (()=>TilejsonPropType),
    "injectAccessToken": (()=>injectAccessToken),
    "mergeBoundaryData": (()=>mergeBoundaryData)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$log$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__log$3e$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/core/dist/utils/log.js [client] (ecmascript) <export default as log>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$deep$2d$equal$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__deepEqual__as__$5f$deepEqual$3e$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/core/dist/utils/deep-equal.js [client] (ecmascript) <export deepEqual as _deepEqual>");
;
;
function injectAccessToken(loadOptions, accessToken) {
    if (!loadOptions?.fetch?.headers?.Authorization) {
        loadOptions.fetch = {
            ...loadOptions.fetch,
            headers: {
                ...loadOptions.fetch?.headers,
                Authorization: `Bearer ${accessToken}`
            }
        };
    }
}
function mergeBoundaryData(geometry, properties) {
    const mapping = {};
    for (const { geoid, ...rest } of properties.properties){
        if (geoid in mapping) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$log$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__log$3e$__["log"].warn('Duplicate geoid key in boundary mapping, using first occurance')();
        } else {
            mapping[geoid] = rest;
        }
    }
    for (const type of [
        'points',
        'lines',
        'polygons'
    ]){
        const geom = geometry[type];
        if (geom.positions.value.length === 0) {
            continue;
        }
        geom.properties = geom.properties.map(({ geoid })=>mapping[geoid]);
        // numericProps need to be filled to match length of positions buffer
        const { positions, globalFeatureIds } = geom;
        let indices = null;
        if (type === 'lines') indices = geom.pathIndices.value;
        if (type === 'polygons') indices = geom.polygonIndices.value;
        const length = positions.value.length / positions.size;
        for(const key in properties.numericProps){
            const sourceProp = properties.numericProps[key].value;
            const TypedArray = sourceProp.constructor;
            const destProp = new TypedArray(length);
            geom.numericProps[key] = {
                value: destProp,
                size: 1
            };
            if (!indices) {
                for(let i = 0; i < length; i++){
                    // points
                    const featureId = globalFeatureIds.value[i];
                    destProp[i] = sourceProp[featureId];
                }
            } else {
                // lines|polygons
                for(let i = 0; i < indices.length - 1; i++){
                    const startIndex = indices[i];
                    const endIndex = indices[i + 1];
                    const featureId = globalFeatureIds.value[startIndex];
                    destProp.fill(sourceProp[featureId], startIndex, endIndex);
                }
            }
        }
    }
    return geometry;
}
const TilejsonPropType = {
    type: 'object',
    value: null,
    validate: (value, propType)=>propType.optional && value === null || typeof value === 'object' && Array.isArray(value.tiles) && value.tiles.every((url)=>typeof url === 'string'),
    equal: (value1, value2)=>{
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$deep$2d$equal$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__deepEqual__as__$5f$deepEqual$3e$__["_deepEqual"])(value1, value2, 2);
    },
    async: true
}; //# sourceMappingURL=utils.js.map
}}),
"[project]/node_modules/@deck.gl/carto/dist/layers/cluster-tile-layer.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$layers$2f$dist$2f$geojson$2d$layer$2f$geojson$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__GeoJsonLayer$3e$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/layers/dist/geojson-layer/geojson-layer.js [client] (ecmascript) <export default as GeoJsonLayer>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$geo$2d$layers$2f$dist$2f$tile$2d$layer$2f$tile$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__TileLayer$3e$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/geo-layers/dist/tile-layer/tile-layer.js [client] (ecmascript) <export default as TileLayer>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$loaders$2e$gl$2f$core$2f$dist$2f$lib$2f$api$2f$register$2d$loaders$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@loaders.gl/core/dist/lib/api/register-loaders.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$loaders$2e$gl$2f$gis$2f$dist$2f$lib$2f$binary$2d$features$2f$binary$2d$to$2d$geojson$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@loaders.gl/gis/dist/lib/binary-features/binary-to-geojson.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$composite$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__CompositeLayer$3e$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/core/dist/lib/composite-layer.js [client] (ecmascript) <export default as CompositeLayer>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$deep$2d$equal$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__deepEqual__as__$5f$deepEqual$3e$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/core/dist/utils/deep-equal.js [client] (ecmascript) <export deepEqual as _deepEqual>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$cluster$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/cluster-utils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$constants$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/constants.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$quadbin$2d$tileset$2d$2d$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/quadbin-tileset-2d.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$quadbin$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/quadbin-utils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$schema$2f$carto$2d$spatial$2d$tile$2d$loader$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/schema/carto-spatial-tile-loader.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/utils.js [client] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$loaders$2e$gl$2f$core$2f$dist$2f$lib$2f$api$2f$register$2d$loaders$2e$js__$5b$client$5d$__$28$ecmascript$29$__["registerLoaders"])([
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$schema$2f$carto$2d$spatial$2d$tile$2d$loader$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"]
]);
const defaultProps = {
    data: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["TilejsonPropType"],
    clusterLevel: {
        type: 'number',
        value: 5,
        min: 1
    },
    getPosition: {
        type: 'accessor',
        value: ({ id })=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$quadbin$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getQuadbinPolygon"])(id, 0.5).slice(2, 4)
    },
    getWeight: {
        type: 'accessor',
        value: 1
    },
    refinementStrategy: 'no-overlap',
    tileSize: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$constants$2e$js__$5b$client$5d$__$28$ecmascript$29$__["DEFAULT_TILE_SIZE"]
};
class ClusterGeoJsonLayer extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$geo$2d$layers$2f$dist$2f$tile$2d$layer$2f$tile$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__TileLayer$3e$__["TileLayer"] {
    initializeState() {
        super.initializeState();
        this.state.aggregationCache = new WeakMap();
    }
    // eslint-disable-next-line max-statements
    renderLayers() {
        const visibleTiles = this.state.tileset?.tiles.filter((tile)=>{
            return tile.isLoaded && tile.content && this.state.tileset.isTileVisible(tile);
        });
        if (!visibleTiles?.length) {
            return null;
        }
        visibleTiles.sort((a, b)=>b.zoom - a.zoom);
        const { zoom } = this.context.viewport;
        const { clusterLevel, getPosition, getWeight } = this.props;
        const { aggregationCache } = this.state;
        const properties = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$cluster$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["extractAggregationProperties"])(visibleTiles[0]);
        const data = [];
        let needsUpdate = false;
        for (const tile of visibleTiles){
            // Calculate aggregation based on viewport zoom
            const overZoom = Math.round(zoom - tile.zoom);
            const aggregationLevels = Math.round(clusterLevel) - overZoom;
            let tileAggregationCache = aggregationCache.get(tile.content);
            if (!tileAggregationCache) {
                tileAggregationCache = new Map();
                aggregationCache.set(tile.content, tileAggregationCache);
            }
            const didAggregate = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$cluster$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["aggregateTile"])(tile, tileAggregationCache, aggregationLevels, properties, getPosition, getWeight);
            needsUpdate || (needsUpdate = didAggregate);
            data.push(...tileAggregationCache.get(aggregationLevels));
        }
        data.sort((a, b)=>Number(b.count - a.count));
        const clusterIds = data?.map((tile)=>tile.id);
        needsUpdate || (needsUpdate = !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$deep$2d$equal$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__deepEqual__as__$5f$deepEqual$3e$__["_deepEqual"])(clusterIds, this.state.clusterIds, 1));
        this.setState({
            clusterIds
        });
        if (needsUpdate) {
            const stats = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$cluster$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["computeAggregationStats"])(data, properties);
            const binaryData = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$cluster$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["clustersToBinary"])(data);
            binaryData.points.attributes = {
                stats
            };
            this.setState({
                data: binaryData
            });
        }
        const props = {
            ...this.props,
            id: 'clusters',
            data: this.state.data,
            dataComparator: (data, oldData)=>{
                const newIds = data?.points?.properties?.map((tile)=>tile.id);
                const oldIds = oldData?.points?.properties?.map((tile)=>tile.id);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$deep$2d$equal$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__deepEqual__as__$5f$deepEqual$3e$__["_deepEqual"])(newIds, oldIds, 1);
            }
        };
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$layers$2f$dist$2f$geojson$2d$layer$2f$geojson$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__GeoJsonLayer$3e$__["GeoJsonLayer"](this.getSubLayerProps(props));
    }
    getPickingInfo(params) {
        const info = params.info;
        if (info.index !== -1) {
            const { data } = params.sourceLayer.props;
            info.object = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$loaders$2e$gl$2f$gis$2f$dist$2f$lib$2f$binary$2d$features$2f$binary$2d$to$2d$geojson$2e$js__$5b$client$5d$__$28$ecmascript$29$__["binaryToGeojson"])(data, {
                globalFeatureId: info.index
            });
        }
        return info;
    }
    _updateAutoHighlight(info) {
        for (const layer of this.getSubLayers()){
            layer.updateAutoHighlight(info);
        }
    }
    filterSubLayer() {
        return true;
    }
}
ClusterGeoJsonLayer.layerName = 'ClusterGeoJsonLayer';
ClusterGeoJsonLayer.defaultProps = defaultProps;
// Adapter layer around ClusterLayer that converts tileJSON into TileLayer API
class ClusterTileLayer extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$composite$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__CompositeLayer$3e$__["CompositeLayer"] {
    getLoadOptions() {
        const loadOptions = super.getLoadOptions() || {};
        const tileJSON = this.props.data;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["injectAccessToken"])(loadOptions, tileJSON.accessToken);
        loadOptions.cartoSpatialTile = {
            ...loadOptions.cartoSpatialTile,
            scheme: 'quadbin'
        };
        return loadOptions;
    }
    renderLayers() {
        const tileJSON = this.props.data;
        if (!tileJSON) return null;
        const { tiles: data, maxresolution: maxZoom } = tileJSON;
        return [
            // @ts-ignore
            new ClusterGeoJsonLayer(this.props, {
                id: `cluster-geojson-layer-${this.props.id}`,
                data,
                // TODO: Tileset2D should be generic over TileIndex type
                TilesetClass: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$quadbin$2d$tileset$2d$2d$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"],
                maxZoom,
                loadOptions: this.getLoadOptions()
            })
        ];
    }
}
ClusterTileLayer.layerName = 'ClusterTileLayer';
ClusterTileLayer.defaultProps = defaultProps;
const __TURBOPACK__default__export__ = ClusterTileLayer;
 //# sourceMappingURL=cluster-tile-layer.js.map
}}),
"[project]/node_modules/@deck.gl/carto/dist/layers/h3-tileset-2d.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_context__.s({
    "default": (()=>H3Tileset2D),
    "getHexagonResolution": (()=>getHexagonResolution)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$geo$2d$layers$2f$dist$2f$tileset$2d$2d$2f$tileset$2d$2d$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__Tileset2D__as__$5f$Tileset2D$3e$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/geo-layers/dist/tileset-2d/tileset-2d.js [client] (ecmascript) <export Tileset2D as _Tileset2D>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$h3$2d$js$2f$dist$2f$browser$2f$h3$2d$js$2e$es$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/h3-js/dist/browser/h3-js.es.js [client] (ecmascript)");
;
;
const MAX_LATITUDE = 85.051128;
// `polygonToCells()` fills based on hexagon center, this function will
// pad the bounds such that all cells that overlap the bounds will be included
function padBoundingBox({ west, north, east, south }, resolution) {
    const corners = [
        [
            north,
            east
        ],
        [
            south,
            east
        ],
        [
            south,
            west
        ],
        [
            north,
            west
        ]
    ];
    const cornerCells = corners.map((c)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$h3$2d$js$2f$dist$2f$browser$2f$h3$2d$js$2e$es$2e$js__$5b$client$5d$__$28$ecmascript$29$__["latLngToCell"])(c[0], c[1], resolution));
    const cornerEdgeLengths = cornerCells.map((c)=>Math.max(...(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$h3$2d$js$2f$dist$2f$browser$2f$h3$2d$js$2e$es$2e$js__$5b$client$5d$__$28$ecmascript$29$__["originToDirectedEdges"])(c).map((e)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$h3$2d$js$2f$dist$2f$browser$2f$h3$2d$js$2e$es$2e$js__$5b$client$5d$__$28$ecmascript$29$__["edgeLength"])(e, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$h3$2d$js$2f$dist$2f$browser$2f$h3$2d$js$2e$es$2e$js__$5b$client$5d$__$28$ecmascript$29$__["UNITS"].rads))) * 180 / Math.PI);
    const bufferLat = Math.max(...cornerEdgeLengths);
    const bufferLon = Math.min(180, bufferLat / Math.cos((north + south) / 2 * Math.PI / 180));
    return {
        north: Math.min(north + bufferLat, MAX_LATITUDE),
        east: east + bufferLon,
        south: Math.max(south - bufferLat, -MAX_LATITUDE),
        west: west - bufferLon
    };
}
function getHexagonsInBoundingBox({ west, north, east, south }, resolution) {
    const longitudeSpan = Math.abs(east - west);
    if (longitudeSpan > 180) {
        // This is a known issue in h3-js: polygonToCells does not work correctly
        // when longitude span is larger than 180 degrees.
        const nSegments = Math.ceil(longitudeSpan / 180);
        let h3Indices = [];
        for(let s = 0; s < nSegments; s++){
            const segmentWest = west + s * 180;
            const segmentEast = Math.min(segmentWest + 179.9999999, east);
            h3Indices = h3Indices.concat(getHexagonsInBoundingBox({
                west: segmentWest,
                north,
                east: segmentEast,
                south
            }, resolution));
        }
        return [
            ...new Set(h3Indices)
        ];
    }
    const polygon = [
        [
            north,
            east
        ],
        [
            south,
            east
        ],
        [
            south,
            west
        ],
        [
            north,
            west
        ],
        [
            north,
            east
        ]
    ];
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$h3$2d$js$2f$dist$2f$browser$2f$h3$2d$js$2e$es$2e$js__$5b$client$5d$__$28$ecmascript$29$__["polygonToCells"])(polygon, resolution);
}
function tileToBoundingBox(index) {
    const coordinates = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$h3$2d$js$2f$dist$2f$browser$2f$h3$2d$js$2e$es$2e$js__$5b$client$5d$__$28$ecmascript$29$__["cellToBoundary"])(index);
    const latitudes = coordinates.map((c)=>c[0]);
    const longitudes = coordinates.map((c)=>c[1]);
    const west = Math.min(...longitudes);
    const south = Math.min(...latitudes);
    const east = Math.max(...longitudes);
    const north = Math.max(...latitudes);
    return {
        west,
        south,
        east,
        north
    };
}
// Resolution conversion function. Takes a WebMercatorViewport and returns
// a H3 resolution such that the screen space size of the hexagons is
// similar
// Relative scale factor (0 = no biasing, 2 = a few hexagons cover view)
const BIAS = 2;
function getHexagonResolution(viewport, tileSize) {
    // Difference in given tile size compared to deck's internal 512px tile size,
    // expressed as an offset to the viewport zoom.
    const zoomOffset = Math.log2(tileSize / 512);
    const hexagonScaleFactor = 2 / 3 * (viewport.zoom - zoomOffset);
    const latitudeScaleFactor = Math.log(1 / Math.cos(Math.PI * viewport.latitude / 180));
    // Clip and bias
    return Math.max(0, Math.floor(hexagonScaleFactor + latitudeScaleFactor - BIAS));
}
class H3Tileset2D extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$geo$2d$layers$2f$dist$2f$tileset$2d$2d$2f$tileset$2d$2d$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__Tileset2D__as__$5f$Tileset2D$3e$__["_Tileset2D"] {
    /**
     * Returns all tile indices in the current viewport. If the current zoom level is smaller
     * than minZoom, return an empty array. If the current zoom level is greater than maxZoom,
     * return tiles that are on maxZoom.
     */ // @ts-expect-error Tileset2D should be generic over TileIndex
    getTileIndices({ viewport, minZoom, maxZoom }) {
        if (viewport.latitude === undefined) return [];
        const [west, south, east, north] = viewport.getBounds();
        const { tileSize } = this.opts;
        let z = getHexagonResolution(viewport, tileSize);
        let indices;
        if (typeof minZoom === 'number' && Number.isFinite(minZoom) && z < minZoom) {
            // TODO support `extent` prop
            return [];
        }
        if (typeof maxZoom === 'number' && Number.isFinite(maxZoom) && z > maxZoom) {
            z = maxZoom;
            // Once we are at max zoom, getHexagonsInBoundingBox doesn't work, simply
            // get a ring centered on the hexagon in the viewport center
            const center = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$h3$2d$js$2f$dist$2f$browser$2f$h3$2d$js$2e$es$2e$js__$5b$client$5d$__$28$ecmascript$29$__["latLngToCell"])(viewport.latitude, viewport.longitude, maxZoom);
            indices = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$h3$2d$js$2f$dist$2f$browser$2f$h3$2d$js$2e$es$2e$js__$5b$client$5d$__$28$ecmascript$29$__["gridDisk"])(center, 1);
        } else {
            const paddedBounds = padBoundingBox({
                west,
                north,
                east,
                south
            }, z);
            indices = getHexagonsInBoundingBox(paddedBounds, z);
        }
        return indices.map((i)=>({
                i
            }));
    }
    // @ts-expect-error Tileset2D should be generic over TileIndex
    getTileId({ i }) {
        return i;
    }
    // @ts-expect-error Tileset2D should be generic over TileIndex
    getTileMetadata({ i }) {
        return {
            bbox: tileToBoundingBox(i)
        };
    }
    // @ts-expect-error Tileset2D should be generic over TileIndex
    getTileZoom({ i }) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$h3$2d$js$2f$dist$2f$browser$2f$h3$2d$js$2e$es$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getResolution"])(i);
    }
    // @ts-expect-error Tileset2D should be generic over TileIndex
    getParentIndex(index) {
        const resolution = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$h3$2d$js$2f$dist$2f$browser$2f$h3$2d$js$2e$es$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getResolution"])(index.i);
        const i = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$h3$2d$js$2f$dist$2f$browser$2f$h3$2d$js$2e$es$2e$js__$5b$client$5d$__$28$ecmascript$29$__["cellToParent"])(index.i, resolution - 1);
        return {
            i
        };
    }
} //# sourceMappingURL=h3-tileset-2d.js.map
}}),
"[project]/node_modules/@deck.gl/carto/dist/layers/spatial-index-tile-layer.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$loaders$2e$gl$2f$core$2f$dist$2f$lib$2f$api$2f$register$2d$loaders$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@loaders.gl/core/dist/lib/api/register-loaders.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$schema$2f$carto$2d$spatial$2d$tile$2d$loader$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/schema/carto-spatial-tile-loader.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$geo$2d$layers$2f$dist$2f$tile$2d$layer$2f$tile$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__TileLayer$3e$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/geo-layers/dist/tile-layer/tile-layer.js [client] (ecmascript) <export default as TileLayer>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$constants$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/constants.js [client] (ecmascript)");
;
;
(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$loaders$2e$gl$2f$core$2f$dist$2f$lib$2f$api$2f$register$2d$loaders$2e$js__$5b$client$5d$__$28$ecmascript$29$__["registerLoaders"])([
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$schema$2f$carto$2d$spatial$2d$tile$2d$loader$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"]
]);
;
;
function isFeatureIdDefined(value) {
    return value !== undefined && value !== null && value !== '';
}
const defaultProps = {
    tileSize: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$constants$2e$js__$5b$client$5d$__$28$ecmascript$29$__["DEFAULT_TILE_SIZE"]
};
class SpatialIndexTileLayer extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$geo$2d$layers$2f$dist$2f$tile$2d$layer$2f$tile$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__TileLayer$3e$__["TileLayer"] {
    _updateAutoHighlight(info) {
        const { hoveredFeatureId } = this.state;
        const hoveredFeature = info.object;
        let newHoveredFeatureId = null;
        if (hoveredFeature) {
            newHoveredFeatureId = hoveredFeature.id;
        }
        if (hoveredFeatureId !== newHoveredFeatureId) {
            let { highlightColor } = this.props;
            if (typeof highlightColor === 'function') {
                highlightColor = highlightColor(info);
            }
            this.setState({
                highlightColor,
                hoveredFeatureId: newHoveredFeatureId
            });
        }
    }
    getSubLayerPropsByTile(tile) {
        return {
            highlightedObjectIndex: this.getHighlightedObjectIndex(tile),
            highlightColor: this.state.highlightColor
        };
    }
    getHighlightedObjectIndex(tile) {
        const { hoveredFeatureId } = this.state;
        const data = tile.content;
        const isFeatureIdPresent = isFeatureIdDefined(hoveredFeatureId);
        if (!isFeatureIdPresent || !Array.isArray(data) || // Quick check for whether id is within tile. data.findIndex is expensive
        !this._featureInTile(tile, hoveredFeatureId)) {
            return -1;
        }
        return data.findIndex((feature)=>feature.id === hoveredFeatureId);
    }
    _featureInTile(tile, featureId) {
        // TODO: Tile2DHeader index should be generic for H3TileIndex or QuadbinTileIndex
        const tileset = this.state.tileset;
        const tileZoom = tileset.getTileZoom(tile.index);
        // @ts-ignore
        const KEY = tile.index.q ? 'q' : 'i';
        // TODO - Tileset2D methods expect tile index in the shape of {x, y, z}
        let featureIndex = {
            [KEY]: featureId
        };
        let featureZoom = tileset.getTileZoom(featureIndex);
        while(!(featureZoom <= tileZoom)){
            featureIndex = tileset.getParentIndex(featureIndex);
            featureZoom = tileset.getTileZoom(featureIndex);
        }
        return featureIndex[KEY] === tile.index[KEY];
    }
}
SpatialIndexTileLayer.layerName = 'SpatialIndexTileLayer';
SpatialIndexTileLayer.defaultProps = defaultProps;
const __TURBOPACK__default__export__ = SpatialIndexTileLayer;
 //# sourceMappingURL=spatial-index-tile-layer.js.map
}}),
"[project]/node_modules/@deck.gl/carto/dist/layers/h3-tile-layer.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__),
    "renderSubLayers": (()=>renderSubLayers)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$composite$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__CompositeLayer$3e$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/core/dist/lib/composite-layer.js [client] (ecmascript) <export default as CompositeLayer>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$geo$2d$layers$2f$dist$2f$h3$2d$layers$2f$h3$2d$hexagon$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__H3HexagonLayer$3e$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/geo-layers/dist/h3-layers/h3-hexagon-layer.js [client] (ecmascript) <export default as H3HexagonLayer>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$h3$2d$tileset$2d$2d$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/h3-tileset-2d.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$spatial$2d$index$2d$tile$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/spatial-index-tile-layer.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/utils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$constants$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/constants.js [client] (ecmascript)");
;
;
;
;
;
;
const renderSubLayers = (props)=>{
    const { data } = props;
    const { index } = props.tile;
    if (!data || !data.length) return null;
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$geo$2d$layers$2f$dist$2f$h3$2d$layers$2f$h3$2d$hexagon$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__H3HexagonLayer$3e$__["H3HexagonLayer"](props, {
        getHexagon: (d)=>d.id,
        centerHexagon: index,
        highPrecision: true
    });
};
const defaultProps = {
    data: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["TilejsonPropType"],
    tileSize: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$constants$2e$js__$5b$client$5d$__$28$ecmascript$29$__["DEFAULT_TILE_SIZE"]
};
class H3TileLayer extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$composite$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__CompositeLayer$3e$__["CompositeLayer"] {
    initializeState() {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$geo$2d$layers$2f$dist$2f$h3$2d$layers$2f$h3$2d$hexagon$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__H3HexagonLayer$3e$__["H3HexagonLayer"]._checkH3Lib();
    }
    getLoadOptions() {
        const loadOptions = super.getLoadOptions() || {};
        const tileJSON = this.props.data;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["injectAccessToken"])(loadOptions, tileJSON.accessToken);
        loadOptions.cartoSpatialTile = {
            ...loadOptions.cartoSpatialTile,
            scheme: 'h3'
        };
        return loadOptions;
    }
    renderLayers() {
        const tileJSON = this.props.data;
        if (!tileJSON) return null;
        const { tiles: data } = tileJSON;
        let { minresolution, maxresolution } = tileJSON;
        // Convert Mercator zooms provided in props into H3 res levels
        // and clip into valid range provided from the tilejson
        if (this.props.minZoom) {
            minresolution = Math.max(minresolution, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$h3$2d$tileset$2d$2d$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getHexagonResolution"])({
                zoom: this.props.minZoom,
                latitude: 0
            }, this.props.tileSize));
        }
        if (this.props.maxZoom) {
            maxresolution = Math.min(maxresolution, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$h3$2d$tileset$2d$2d$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getHexagonResolution"])({
                zoom: this.props.maxZoom,
                latitude: 0
            }, this.props.tileSize));
        }
        const SubLayerClass = this.getSubLayerClass('spatial-index-tile', __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$spatial$2d$index$2d$tile$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"]);
        // The naming is unfortunate, but minZoom & maxZoom in the context
        // of a Tileset2D refer to the resolution levels, not the Mercator zooms
        return new SubLayerClass(this.props, {
            id: `h3-tile-layer-${this.props.id}`,
            data,
            // TODO: Tileset2D should be generic over TileIndex type
            TilesetClass: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$h3$2d$tileset$2d$2d$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"],
            renderSubLayers,
            // minZoom and maxZoom are H3 resolutions, however we must use this naming as that is what the Tileset2D class expects
            minZoom: minresolution,
            maxZoom: maxresolution,
            loadOptions: this.getLoadOptions()
        });
    }
}
H3TileLayer.layerName = 'H3TileLayer';
H3TileLayer.defaultProps = defaultProps;
const __TURBOPACK__default__export__ = H3TileLayer;
 //# sourceMappingURL=h3-tile-layer.js.map
}}),
"[project]/node_modules/@deck.gl/carto/dist/layers/heatmap.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/**
 * @filter       Heatmap
 * @param radiusPixels Blur radius in pixels, controls smoothness of heatmap
 * @param colorDomain Domain to apply to values prior to applying color scale
 * @param colorTexture 1D RGB lookup texture for color scale
 * @param intensity Multiplier to apply to value
 * @param opacity Output opacity
 */ __turbopack_context__.s({
    "heatmap": (()=>heatmap)
});
const fs = /* glsl */ `\
uniform heatmapUniforms {
  vec2 colorDomain;
  vec2 delta;
  float intensity;
  float opacity;
  float radiusPixels;
} heatmap;

uniform sampler2D colorTexture;

vec3 colorGradient(float value) {
  return texture(colorTexture, vec2(value, 0.5)).rgb;
}

const vec3 SHIFT = vec3(1.0, 256.0, 256.0 * 256.0);
const float MAX_VAL = SHIFT.z * 255.0;
const float SCALE = MAX_VAL / 8.0;
vec4 pack(float value) {
  return vec4(mod(vec3(value, floor(value / SHIFT.yz)), 256.0), 255.0) / 255.0;
}
float unpack(vec3 color) {
  return 255.0 * dot(color, SHIFT);
}

vec4 heatmap_sampleColor(sampler2D source, vec2 texSize, vec2 texCoord) {
  bool firstPass = (heatmap.delta.y < 0.5);
  float accumulator = 0.0;

  // Controls quality of heatmap, larger values increase quality at expense of performance
  float SUPPORT = clamp(heatmap.radiusPixels / 2.0, 8.0, 32.0);

  // Gaussian normalization parameters
  float sigma = SUPPORT / 3.0;
  float a = -0.5 / (sigma * sigma);
  float w0 = 0.3989422804014327 / sigma; // 1D normalization
  for (float t = -SUPPORT; t <= SUPPORT; t++) {
    vec2 percent = (t * heatmap.delta - 0.5) / SUPPORT;
    vec2 delta = percent * heatmap.radiusPixels / texSize;
    vec4 offsetColor = texture(source, texCoord + delta);

    // Unpack float
    float value = unpack(offsetColor.rgb);

    // Gaussian
    float weight = w0 * exp(a * t * t);
    
    accumulator += value * weight;
  }

  if (firstPass) {
    return pack(accumulator);
  }

  // Undo scaling to obtain normalized density
  float density = 10.0 * heatmap.intensity * accumulator / SCALE;
 
  // Domain also in normalized density units
  vec2 domain = heatmap.colorDomain;

  // Apply domain
  float f = (density - domain[0]) / (domain[1] - domain[0]);

  // sqrt/log scaling??
  // float f = (log(density) - log(domain[0] + 1.0)) / (log(domain[1] + 1.0) - log(domain[0] + 1.0));
  // f = sqrt(f);

  // Color map
  vec4 color = vec4(0.0);
  color.rgb = colorGradient(f);

  color.a = smoothstep(0.0, 0.1, f);
  color.a = pow(color.a, 1.0 / 2.2);
  color.a *= heatmap.opacity;

  return color;
}
`;
const heatmap = {
    name: 'heatmap',
    uniformPropTypes: {
        colorDomain: {
            value: [
                0,
                1
            ]
        },
        delta: {
            value: [
                0,
                1
            ]
        },
        intensity: {
            value: 1,
            min: 0.1,
            max: 10
        },
        opacity: {
            value: 1,
            min: 0,
            max: 1
        },
        radiusPixels: {
            value: 20,
            min: 0,
            softMax: 100
        }
    },
    uniformTypes: {
        colorDomain: 'vec2<f32>',
        delta: 'vec2<f32>',
        intensity: 'f32',
        opacity: 'f32',
        radiusPixels: 'f32'
    },
    // @ts-ignore TODO v9.1
    getUniforms: (opts)=>{
        if (!opts) return {};
        const { colorDomain = [
            0,
            1
        ], colorTexture, delta = [
            1,
            0
        ], intensity = 1, opacity = 1, radiusPixels = 20 } = opts;
        return {
            colorDomain,
            colorTexture,
            delta,
            intensity,
            opacity,
            radiusPixels
        };
    },
    fs,
    passes: [
        // @ts-expect-error Seems typing in luma.gl should be Partial<>
        {
            sampler: true,
            uniforms: {
                delta: [
                    1,
                    0
                ]
            }
        },
        // @ts-expect-error Seems typing in luma.gl should be Partial<>
        {
            sampler: true,
            uniforms: {
                delta: [
                    0,
                    1
                ]
            }
        }
    ]
}; //# sourceMappingURL=heatmap.js.map
}}),
"[project]/node_modules/@deck.gl/carto/dist/layers/post-process-utils.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_context__.s({
    "PostProcessModifier": (()=>PostProcessModifier),
    "RTTModifier": (()=>RTTModifier),
    "copy": (()=>copy)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__Layer$3e$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/core/dist/lib/layer.js [client] (ecmascript) <export default as Layer>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$effects$2f$post$2d$process$2d$effect$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__PostProcessEffect$3e$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/core/dist/effects/post-process-effect.js [client] (ecmascript) <export default as PostProcessEffect>");
;
const TEXTURE_PROPS = {
    format: 'rgba8unorm',
    mipmaps: false,
    sampler: {
        minFilter: 'linear',
        magFilter: 'linear',
        addressModeU: 'clamp-to-edge',
        addressModeV: 'clamp-to-edge'
    }
};
function getPostProcessLayer(layer) {
    while(layer.parent && !layer.applyPostProcess){
        layer = layer.parent;
    }
    return layer;
}
/**
 * Dummy Layer that draws nothing, just calls back to root Layer
 */ class DrawCallbackLayer extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__Layer$3e$__["Layer"] {
    initializeState() {
        this.id = `draw-callback-${getPostProcessLayer(this).props.id}`;
    }
    _drawLayer() {
        getPostProcessLayer(this).applyPostProcess();
    }
}
DrawCallbackLayer.layerName = 'DrawCallbackLayer';
function RTTModifier(BaseLayer) {
    var _a;
    // @ts-expect-error initializeState is abstract
    return _a = class RTTLayer extends BaseLayer {
        draw(opts) {
            const { shaderModuleProps } = opts;
            const { picking } = shaderModuleProps;
            const postProcessLayer = getPostProcessLayer(this);
            if (!picking.isActive) {
                postProcessLayer.enableRTT(opts);
            }
            // Draw actual layer
            super.draw(opts);
            if (!picking.isActive) {
                postProcessLayer.disableRTT();
            }
        }
    }, // @ts-expect-error typescript doesn't see static property
    _a.layerName = `RTT-${BaseLayer.layerName}`, _a;
}
function PostProcessModifier(BaseLayer, effect) {
    var _a;
    return _a = class PostProcessLayer extends BaseLayer {
        initializeState(context) {
            super.initializeState(context);
            this._createTextures();
            this.internalState.postProcess = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$effects$2f$post$2d$process$2d$effect$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__PostProcessEffect$3e$__["PostProcessEffect"](effect, this.props);
            this.internalState.postProcess.setup(context);
        }
        updateState(params) {
            super.updateState(params);
            this.internalState.postProcess.setProps(this.props);
        }
        renderLayers() {
            let subLayers = super.renderLayers();
            if (!subLayers) {
                return null;
            }
            subLayers = Array.isArray(subLayers) ? subLayers : [
                subLayers
            ];
            return [
                ...subLayers,
                new DrawCallbackLayer()
            ];
        }
        _createTextures() {
            const { device } = this.context;
            this.internalState.renderBuffers = [
                0,
                1
            ].map((i)=>{
                return device.createFramebuffer({
                    id: `layer-fbo-${i}`,
                    colorAttachments: [
                        device.createTexture(TEXTURE_PROPS)
                    ],
                    depthStencilAttachment: 'depth16unorm'
                });
            });
        }
        _resizeBuffers(opts) {
            // TODO we could likely render to a smaller buffer for better perf
            const { shaderModuleProps } = opts;
            const { viewport } = this.context;
            const { devicePixelRatio } = shaderModuleProps.project;
            const width = devicePixelRatio * viewport.width;
            const height = devicePixelRatio * viewport.height;
            this.internalState.renderBuffers.forEach((fbo)=>fbo.resize({
                    width,
                    height
                }));
        }
        enableRTT(opts) {
            this._resizeBuffers(opts);
            this.internalState.originalRenderPass = this.context.renderPass;
            const [framebuffer] = this.internalState.renderBuffers;
            // Create new render pass for RTT
            this.internalState.internalRenderPass = this.context.device.beginRenderPass({
                framebuffer,
                parameters: {
                    viewport: [
                        0,
                        0,
                        framebuffer.width,
                        framebuffer.height
                    ]
                },
                // Only clear on first render
                clearColor: this.internalState.renderInProgress ? false : [
                    0,
                    0,
                    0,
                    0
                ]
            });
            this.internalState.renderInProgress = true;
            this.context.renderPass = this.internalState.internalRenderPass;
        }
        disableRTT() {
            // End render pass, and reinstate original
            this.internalState.internalRenderPass.end();
            this.context.renderPass = this.internalState.originalRenderPass;
        }
        applyPostProcess() {
            if (!this.internalState.renderInProgress) {
                return;
            }
            // Apply post process effect
            const [inputBuffer, swapBuffer] = this.internalState.renderBuffers;
            const { framebuffer: target } = this.context.renderPass.props;
            this.internalState.postProcess.postRender({
                inputBuffer,
                swapBuffer,
                target
            });
            this.internalState.renderInProgress = false;
        }
        _finalize() {
            this.internalState.renderBuffers.forEach((fbo)=>{
                fbo.destroy();
            });
            this.internalState.renderBuffers = null;
            this.internalState.postProcess.cleanup();
        }
    }, _a.layerName = `PostProcess${BaseLayer.layerName}`, _a;
}
const fs = /* glsl */ `\
vec4 copy_filterColor_ext(vec4 color, vec2 texSize, vec2 texCoord) {
  return color;
}
`;
const copy = {
    name: 'copy',
    fs,
    getUniforms: ()=>({}),
    passes: [
        {
            filter: true
        }
    ]
}; //# sourceMappingURL=post-process-utils.js.map
}}),
"[project]/node_modules/@deck.gl/carto/dist/layers/quadbin-layer.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$geo$2d$layers$2f$dist$2f$geo$2d$cell$2d$layer$2f$GeoCellLayer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__$5f$GeoCellLayer$3e$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/geo-layers/dist/geo-cell-layer/GeoCellLayer.js [client] (ecmascript) <export default as _GeoCellLayer>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$quadbin$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/quadbin-utils.js [client] (ecmascript)");
;
;
const defaultProps = {
    getQuadbin: {
        type: 'accessor',
        value: (d)=>d.quadbin
    }
};
class QuadbinLayer extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$geo$2d$layers$2f$dist$2f$geo$2d$cell$2d$layer$2f$GeoCellLayer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__$5f$GeoCellLayer$3e$__["_GeoCellLayer"] {
    indexToBounds() {
        const { data, extruded, getQuadbin } = this.props;
        // To avoid z-fighting reduce polygon footprint when extruding
        const coverage = extruded ? 0.99 : 1;
        return {
            data,
            _normalize: false,
            positionFormat: 'XY',
            getPolygon: (x, objectInfo)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$quadbin$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getQuadbinPolygon"])(getQuadbin(x, objectInfo), coverage),
            updateTriggers: {
                getPolygon: coverage
            }
        };
    }
}
QuadbinLayer.layerName = 'QuadbinLayer';
QuadbinLayer.defaultProps = defaultProps;
const __TURBOPACK__default__export__ = QuadbinLayer;
 //# sourceMappingURL=quadbin-layer.js.map
}}),
"[project]/node_modules/@deck.gl/carto/dist/layers/quadbin-tile-layer.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__),
    "renderSubLayers": (()=>renderSubLayers)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$composite$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__CompositeLayer$3e$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/core/dist/lib/composite-layer.js [client] (ecmascript) <export default as CompositeLayer>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$quadbin$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/quadbin-layer.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$quadbin$2d$tileset$2d$2d$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/quadbin-tileset-2d.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$spatial$2d$index$2d$tile$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/spatial-index-tile-layer.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$quadbin$2f$dist$2f$index$2e$esm$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/quadbin/dist/index.esm.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/utils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$constants$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/constants.js [client] (ecmascript)");
;
;
;
;
;
;
;
const renderSubLayers = (props)=>{
    const { data } = props;
    if (!data || !data.length) return null;
    const isBigInt = typeof data[0].id === 'bigint';
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$quadbin$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"](props, {
        getQuadbin: isBigInt ? (d)=>d.id : (d)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$quadbin$2f$dist$2f$index$2e$esm$2e$js__$5b$client$5d$__$28$ecmascript$29$__["hexToBigInt"])(d.id)
    });
};
const defaultProps = {
    data: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["TilejsonPropType"],
    tileSize: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$constants$2e$js__$5b$client$5d$__$28$ecmascript$29$__["DEFAULT_TILE_SIZE"]
};
class QuadbinTileLayer extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$composite$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__CompositeLayer$3e$__["CompositeLayer"] {
    getLoadOptions() {
        const loadOptions = super.getLoadOptions() || {};
        const tileJSON = this.props.data;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["injectAccessToken"])(loadOptions, tileJSON.accessToken);
        loadOptions.cartoSpatialTile = {
            ...loadOptions.cartoSpatialTile,
            scheme: 'quadbin'
        };
        return loadOptions;
    }
    renderLayers() {
        const tileJSON = this.props.data;
        if (!tileJSON) return null;
        const { tiles: data, maxresolution: maxZoom } = tileJSON;
        const SubLayerClass = this.getSubLayerClass('spatial-index-tile', __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$spatial$2d$index$2d$tile$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"]);
        return new SubLayerClass(this.props, {
            id: `quadbin-tile-layer-${this.props.id}`,
            data,
            // TODO: Tileset2D should be generic over TileIndex type
            TilesetClass: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$quadbin$2d$tileset$2d$2d$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"],
            renderSubLayers,
            maxZoom,
            loadOptions: this.getLoadOptions()
        });
    }
}
QuadbinTileLayer.layerName = 'QuadbinTileLayer';
QuadbinTileLayer.defaultProps = defaultProps;
const __TURBOPACK__default__export__ = QuadbinTileLayer;
 //# sourceMappingURL=quadbin-tile-layer.js.map
}}),
"[project]/node_modules/@deck.gl/carto/dist/layers/heatmap-tile-layer.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$quadbin$2f$dist$2f$index$2e$esm$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/quadbin/dist/index.esm.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$composite$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__CompositeLayer$3e$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/core/dist/lib/composite-layer.js [client] (ecmascript) <export default as CompositeLayer>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$layers$2f$dist$2f$solid$2d$polygon$2d$layer$2f$solid$2d$polygon$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__SolidPolygonLayer$3e$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/layers/dist/solid-polygon-layer/solid-polygon-layer.js [client] (ecmascript) <export default as SolidPolygonLayer>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$heatmap$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/heatmap.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$post$2d$process$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/post-process-utils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$quadbin$2d$tile$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/quadbin-tile-layer.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/utils.js [client] (ecmascript)");
;
;
;
;
;
;
;
const defaultColorRange = [
    [
        255,
        255,
        178
    ],
    [
        254,
        217,
        118
    ],
    [
        254,
        178,
        76
    ],
    [
        253,
        141,
        60
    ],
    [
        240,
        59,
        32
    ],
    [
        189,
        0,
        38
    ]
];
const TEXTURE_PROPS = {
    format: 'rgba8unorm',
    mipmaps: false,
    sampler: {
        minFilter: 'linear',
        magFilter: 'linear',
        addressModeU: 'clamp-to-edge',
        addressModeV: 'clamp-to-edge'
    }
};
/**
 * Computes the unit density (inverse of cell area)
 */ function unitDensityForCell(cell) {
    const cellResolution = Number((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$quadbin$2f$dist$2f$index$2e$esm$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getResolution"])(cell));
    return Math.pow(4.0, cellResolution);
}
/**
 * Converts a colorRange array to a flat array with 4 components per color
 */ function colorRangeToFlatArray(colorRange) {
    const flatArray = new Uint8Array(colorRange.length * 4);
    let index = 0;
    for(let i = 0; i < colorRange.length; i++){
        const color = colorRange[i];
        flatArray[index++] = color[0];
        flatArray[index++] = color[1];
        flatArray[index++] = color[2];
        flatArray[index++] = Number.isFinite(color[3]) ? color[3] : 255;
    }
    return flatArray;
}
const uniformBlock = `\
uniform densityUniforms {
  float factor;
} density;
`;
const densityUniforms = {
    name: 'density',
    vs: uniformBlock,
    uniformTypes: {
        factor: 'f32'
    }
};
// Modified polygon layer to draw offscreen and output value expected by heatmap
class RTTSolidPolygonLayer extends (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$post$2d$process$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["RTTModifier"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$layers$2f$dist$2f$solid$2d$polygon$2d$layer$2f$solid$2d$polygon$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__SolidPolygonLayer$3e$__["SolidPolygonLayer"]) {
    getShaders(type) {
        const shaders = super.getShaders(type);
        shaders.inject = {
            'vs:#main-end': `
      // Value from getWeight accessor
  float weight = elevations;

  // Keep "power" delivered to screen constant when tiles update
  // by outputting normalized density
  weight *= density.factor;

  // Pack float into 3 channels to pass to heatmap shader
  // SCALE value important, as we don't want to saturate
  // but also want enough definition to avoid banding
  const vec3 SHIFT = vec3(1.0, 256.0, 256.0 * 256.0);
  const float MAX_VAL = SHIFT.z * 255.0;
  const float SCALE = MAX_VAL / 8.0;
  weight *= SCALE;
  weight = clamp(weight, 0.0, MAX_VAL);
  vColor = vec4(mod(vec3(weight, floor(weight / SHIFT.yz)), 256.0), 255.0) / 255.0;
`
        };
        shaders.modules = [
            ...shaders.modules,
            densityUniforms
        ];
        return shaders;
    }
    draw(opts) {
        const cell = this.props.data[0];
        const maxDensity = this.props.elevationScale;
        const densityProps = {
            factor: unitDensityForCell(cell.id) / maxDensity
        };
        for (const model of this.state.models){
            model.shaderInputs.setProps({
                density: densityProps
            });
        }
        super.draw(opts);
    }
}
RTTSolidPolygonLayer.layerName = 'RTTSolidPolygonLayer';
// Modify QuadbinTileLayer to apply heatmap post process effect
const PostProcessQuadbinTileLayer = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$post$2d$process$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["PostProcessModifier"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$quadbin$2d$tile$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$heatmap$2e$js__$5b$client$5d$__$28$ecmascript$29$__["heatmap"]);
const defaultProps = {
    data: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["TilejsonPropType"],
    getWeight: {
        type: 'accessor',
        value: 1
    },
    onMaxDensityChange: {
        type: 'function',
        optional: true,
        value: null
    },
    colorDomain: {
        type: 'array',
        value: [
            0,
            1
        ]
    },
    colorRange: defaultColorRange,
    intensity: {
        type: 'number',
        value: 1
    },
    radiusPixels: {
        type: 'number',
        min: 0,
        max: 100,
        value: 20
    }
};
class HeatmapTileLayer extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$composite$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__CompositeLayer$3e$__["CompositeLayer"] {
    initializeState() {
        this.state = {
            isLoaded: false,
            tiles: new Set(),
            viewportChanged: false
        };
    }
    shouldUpdateState({ changeFlags }) {
        const { viewportChanged } = changeFlags;
        this.setState({
            viewportChanged
        });
        return changeFlags.somethingChanged;
    }
    updateState(opts) {
        const { props, oldProps } = opts;
        super.updateState(opts);
        if (props.colorRange !== oldProps.colorRange) {
            this._updateColorTexture(opts);
        }
    }
    renderLayers() {
        const { data, getWeight, colorDomain, intensity, radiusPixels, _subLayerProps, updateTriggers, onMaxDensityChange, onViewportLoad, onTileLoad, onTileUnload, ...tileLayerProps } = this.props;
        // Inject modified polygon layer as sublayer into TileLayer
        const subLayerProps = {
            ..._subLayerProps,
            cell: {
                ..._subLayerProps?.cell,
                _subLayerProps: {
                    ..._subLayerProps?.cell?._subLayerProps,
                    fill: {
                        ..._subLayerProps?.cell?._subLayerProps?.fill,
                        type: RTTSolidPolygonLayer
                    }
                }
            }
        };
        let tileZ = 0;
        let maxDensity = 0;
        const tiles = [
            ...this.state.tiles
        ].filter((t)=>t.isVisible && t.content);
        for (const tile of tiles){
            const cell = tile.content[0];
            const unitDensity = unitDensityForCell(cell.id);
            maxDensity = Math.max(tile.userData.maxWeight * unitDensity, maxDensity);
            tileZ = Math.max(tile.zoom, tileZ);
        }
        // Between zoom levels the max density will change, but it isn't possible to know by what factor. Uniform data distributions lead to a factor of 4, while very localized data gives 1. As a heurstic estimate with a value inbetween (2) to make the transitions less obvious.
        const overzoom = this.context.viewport.zoom - tileZ;
        const estimatedMaxDensity = maxDensity * Math.pow(2, overzoom);
        maxDensity = estimatedMaxDensity;
        if (typeof onMaxDensityChange === 'function') {
            onMaxDensityChange(maxDensity);
        }
        return new PostProcessQuadbinTileLayer(tileLayerProps, this.getSubLayerProps({
            id: 'heatmap',
            data,
            // Re-use existing props to pass down values to sublayer
            // TODO replace with custom layer
            getFillColor: 0,
            getElevation: getWeight,
            elevationScale: maxDensity,
            colorDomain,
            radiusPixels,
            intensity,
            _subLayerProps: subLayerProps,
            refinementStrategy: 'no-overlap',
            colorTexture: this.state.colorTexture,
            // Disable line rendering
            extruded: false,
            stroked: false,
            updateTriggers: {
                getElevation: updateTriggers.getWeight
            },
            // Tile stats
            onViewportLoad: (tiles)=>{
                this.setState({
                    isLoaded: true
                });
                if (typeof onViewportLoad === 'function') {
                    onViewportLoad(tiles);
                }
            },
            onTileLoad: (tile)=>{
                let maxWeight = -Infinity;
                if (typeof getWeight !== 'function') {
                    maxWeight = getWeight;
                } else if (tile.content) {
                    for (const d of tile.content){
                        maxWeight = Math.max(getWeight(d, {}), maxWeight);
                    }
                }
                tile.userData = {
                    maxWeight
                };
                this.state.tiles.add(tile);
                if (typeof onTileLoad === 'function') {
                    onTileLoad(tile);
                }
            },
            onTileUnload: (tile)=>{
                this.state.tiles.delete(tile);
                if (typeof onTileUnload === 'function') {
                    onTileUnload(tile);
                }
            },
            transitions: {
                elevationScale: {
                    type: 'spring',
                    stiffness: 0.3,
                    damping: 0.5
                }
            }
        }));
    }
    _updateColorTexture(opts) {
        const { colorRange } = opts.props;
        let { colorTexture } = this.state;
        const colors = colorRangeToFlatArray(colorRange);
        if (colorTexture && colorTexture?.width === colorRange.length) {
            // TODO(v9): Unclear whether `setSubImageData` is a public API, or what to use if not.
            colorTexture.setTexture2DData({
                data: colors
            });
        } else {
            colorTexture?.destroy();
            // @ts-ignore TODO v9.1
            colorTexture = this.context.device.createTexture({
                ...TEXTURE_PROPS,
                data: colors,
                width: colorRange.length,
                height: 1
            });
        }
        this.setState({
            colorTexture
        });
    }
}
HeatmapTileLayer.layerName = 'HeatmapTileLayer';
HeatmapTileLayer.defaultProps = defaultProps;
const __TURBOPACK__default__export__ = HeatmapTileLayer;
 //# sourceMappingURL=heatmap-tile-layer.js.map
}}),
"[project]/node_modules/@deck.gl/carto/dist/layers/point-label-layer.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$composite$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__CompositeLayer$3e$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/core/dist/lib/composite-layer.js [client] (ecmascript) <export default as CompositeLayer>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$layers$2f$dist$2f$text$2d$layer$2f$text$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__TextLayer$3e$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/layers/dist/text-layer/text-layer.js [client] (ecmascript) <export default as TextLayer>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$layers$2f$dist$2f$text$2d$layer$2f$text$2d$background$2d$layer$2f$text$2d$background$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__$5f$TextBackgroundLayer$3e$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/layers/dist/text-layer/text-background-layer/text-background-layer.js [client] (ecmascript) <export default as _TextBackgroundLayer>");
;
;
const [LEFT, TOP, RIGHT, BOTTOM] = [
    0,
    1,
    2,
    3
];
class EnhancedTextBackgroundLayer extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$layers$2f$dist$2f$text$2d$layer$2f$text$2d$background$2d$layer$2f$text$2d$background$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__$5f$TextBackgroundLayer$3e$__["_TextBackgroundLayer"] {
    getShaders() {
        const shaders = super.getShaders();
        let vs = shaders.vs;
        // Modify shader so that the padding is offset by the pixel offset to ensure the padding
        // always captures the anchor point. As padding is uniform we cannot pass it a per-label value
        vs = vs.replaceAll('textBackground.padding.', '_padding.');
        vs = vs.replace('void main(void) {', 'void main(void) {\n  vec4 _padding = textBackground.padding + instancePixelOffsets.xyxy * vec4(1.0, 1.0, -1.0, -1.0);');
        return {
            ...shaders,
            vs
        };
    }
}
EnhancedTextBackgroundLayer.layerName = 'EnhancedTextBackgroundLayer';
// TextLayer which includes modified text-background-layer-vertex shader and only renders the
// primary background layer in the collision pass
class EnhancedTextLayer extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$layers$2f$dist$2f$text$2d$layer$2f$text$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__TextLayer$3e$__["TextLayer"] {
    filterSubLayer({ layer, renderPass }) {
        const background = layer.id.includes('primary-background');
        if (renderPass === 'collision') {
            return background; // Only draw primary background layer in collision pass
        }
        return !background; // Do not draw background layer in other passes
    }
}
EnhancedTextLayer.layerName = 'EnhancedTextLayer';
const defaultProps = {
    ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$layers$2f$dist$2f$text$2d$layer$2f$text$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__TextLayer$3e$__["TextLayer"].defaultProps,
    getRadius: {
        type: 'accessor',
        value: 1
    },
    radiusScale: {
        type: 'number',
        min: 0,
        value: 1
    }
};
class PointLabelLayer extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$composite$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__CompositeLayer$3e$__["CompositeLayer"] {
    calculatePixelOffset(secondary) {
        const { getTextAnchor: anchor, getAlignmentBaseline: alignment, getRadius, getSecondaryText, radiusScale, secondarySizeScale, sizeScale } = this.props;
        const xMult = anchor === 'middle' ? 0 : anchor === 'start' ? 1 : -1;
        const yMult = alignment === 'center' ? 0 : alignment === 'bottom' ? 1 : -1;
        // Padding based on font size (font size / 4)
        const xPadding = sizeScale / 4;
        const yPadding = sizeScale * (1 + 1 / 4);
        // Place secondary label under main label (secondary label always 'top' baseline aligned)
        const secondaryOffset = 0.6 * (1 - yMult) * sizeScale;
        let yOffset = secondary ? secondaryOffset : 0;
        // Special case, position relative to secondary label
        if (anchor === 'middle' && alignment === 'top' && getSecondaryText) {
            yOffset -= secondaryOffset;
            yOffset -= secondarySizeScale;
            yOffset += sizeScale;
        }
        // Padding based on point radius (radius/ 4)
        const radiusPadding = 1 + 1 / 4;
        return typeof getRadius === 'function' ? (d, info)=>{
            const r = (info ? getRadius(d, info) : 1) * radiusScale * radiusPadding;
            return [
                xMult * (r + xPadding),
                yMult * (r + yPadding) + yOffset
            ];
        } : [
            xMult * (getRadius * radiusScale * radiusPadding + xPadding),
            yMult * (getRadius * radiusScale * radiusPadding + yPadding) + yOffset
        ];
    }
    calculateBackgroundPadding() {
        const { getTextAnchor: anchor, getAlignmentBaseline: alignment, sizeScale } = this.props;
        // Heuristics to avoid label overlap
        const paddingX = 12 * sizeScale;
        const paddingY = 3 * sizeScale;
        const backgroundPadding = [
            0,
            0,
            0,
            0
        ];
        if (alignment === 'top') {
            backgroundPadding[TOP] = paddingY;
        } else if (alignment === 'bottom') {
            backgroundPadding[BOTTOM] = paddingY;
        } else {
            backgroundPadding[TOP] = 0.5 * paddingY;
            backgroundPadding[BOTTOM] = 0.5 * paddingY;
        }
        if (anchor === 'start') {
            backgroundPadding[LEFT] = paddingX;
        } else if (anchor === 'end') {
            backgroundPadding[RIGHT] = paddingX;
        } else {
            backgroundPadding[LEFT] = 0.5 * paddingX;
            backgroundPadding[RIGHT] = 0.5 * paddingX;
        }
        return backgroundPadding;
    }
    renderTextLayer(id, { updateTriggers: updateTriggersOverride = {}, ...props }) {
        const { data, characterSet, fontFamily, fontSettings, fontWeight, outlineColor, outlineWidth, sizeScale, radiusScale, getAlignmentBaseline, getColor, getPosition, getTextAnchor, updateTriggers } = this.props;
        return new EnhancedTextLayer(this.getSubLayerProps({
            id,
            data,
            characterSet,
            fontFamily,
            fontSettings,
            fontWeight,
            outlineColor,
            outlineWidth,
            sizeScale,
            getAlignmentBaseline,
            getColor,
            getPosition,
            getTextAnchor,
            updateTriggers: {
                ...updateTriggers,
                ...updateTriggersOverride,
                getPixelOffset: [
                    updateTriggers.getRadius,
                    updateTriggers.getTextAnchor,
                    updateTriggers.getAlignmentBaseline,
                    radiusScale,
                    sizeScale
                ]
            }
        }), {
            getSize: 1,
            _subLayerProps: {
                background: {
                    type: EnhancedTextBackgroundLayer
                }
            }
        }, props);
    }
    renderLayers() {
        const { getText, getSecondaryColor, getSecondaryText, secondaryOutlineColor, secondarySizeScale, updateTriggers } = this.props;
        const getPixelOffset = this.calculatePixelOffset(false);
        const backgroundPadding = this.calculateBackgroundPadding();
        const out = [
            // Text doesn't update via updateTrigger for some reason
            this.renderTextLayer(`${updateTriggers.getText}-primary`, {
                backgroundPadding,
                getText,
                getPixelOffset,
                background: true // Only use background for primary label for faster collisions
            }),
            Boolean(getSecondaryText) && this.renderTextLayer(`${updateTriggers.getSecondaryText}-secondary`, {
                getText: getSecondaryText,
                getPixelOffset: this.calculatePixelOffset(true),
                getAlignmentBaseline: 'top',
                // updateTriggers: {getText: updateTriggers.getSecondaryText},
                // Optional overrides
                ...getSecondaryColor && {
                    getColor: getSecondaryColor
                },
                ...secondarySizeScale && {
                    sizeScale: secondarySizeScale
                },
                ...secondaryOutlineColor && {
                    outlineColor: secondaryOutlineColor
                }
            })
        ];
        return out;
    }
}
PointLabelLayer.layerName = 'PointLabelLayer';
PointLabelLayer.defaultProps = defaultProps;
const __TURBOPACK__default__export__ = PointLabelLayer;
 //# sourceMappingURL=point-label-layer.js.map
}}),
"[project]/node_modules/@deck.gl/carto/dist/layers/raster-layer-vertex.glsl.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
const __TURBOPACK__default__export__ = `\
#version 300 es
#define SHADER_NAME raster-layer-vertex-shader
in vec3 positions;
in vec3 normals;
in float instanceElevations;
in vec4 instanceFillColors;
in vec4 instanceLineColors;
in vec3 instancePickingColors;
out vec4 vColor;
#ifdef FLAT_SHADING
out vec4 position_commonspace;
#endif
void main(void) {
vec2 tileOrigin = column.offset.xy;
float scale = column.widthScale;
int yIndex = - (gl_InstanceID / BLOCK_WIDTH);
int xIndex = gl_InstanceID + (yIndex * BLOCK_WIDTH);
vec2 cellCenter = scale * vec2(float(xIndex) + 0.5, float(yIndex) - 0.5);
vec4 color = column.isStroke ? instanceLineColors : instanceFillColors;
float shouldRender = float(color.a > 0.0 && instanceElevations >= 0.0);
float cellWidth = column.coverage * scale;
geometry.position = vec4(tileOrigin, 0.0, 1.0);
if (project.projectionMode == PROJECTION_MODE_WEB_MERCATOR_AUTO_OFFSET) {
geometry.position.xyz -= project.commonOrigin;
}
geometry.position.xy += cellCenter;
float elevation = 0.0;
float strokeOffsetRatio = 1.0;
if (column.extruded) {
elevation = instanceElevations * (positions.z + 1.0) / 2.0 * column.elevationScale;
} else if (column.stroked) {
float halfOffset = project_pixel_size(column.widthScale) / cellWidth;
if (column.isStroke) {
strokeOffsetRatio -= sign(positions.z) * halfOffset;
} else {
strokeOffsetRatio -= halfOffset;
}
}
geometry.pickingColor = instancePickingColors;
vec2 base = positions.xy * scale * strokeOffsetRatio * column.coverage * shouldRender;
vec3 cell = vec3(base, project_size(elevation));
DECKGL_FILTER_SIZE(cell, geometry);
geometry.position.xyz += cell;
gl_Position = project_common_position_to_clipspace(geometry.position);
geometry.normal = project_normal(normals);
DECKGL_FILTER_GL_POSITION(gl_Position, geometry);
if (column.extruded && !column.isStroke) {
#ifdef FLAT_SHADING
position_commonspace = geometry.position;
vColor = vec4(color.rgb, color.a * layer.opacity);
#else
vec3 lightColor = lighting_getLightColor(color.rgb, project.cameraPosition, geometry.position.xyz, geometry.normal);
vColor = vec4(lightColor, color.a * layer.opacity);
#endif
} else {
vColor = vec4(color.rgb, color.a * layer.opacity);
}
DECKGL_FILTER_COLOR(vColor, geometry);
}
`;
 //# sourceMappingURL=raster-layer-vertex.glsl.js.map
}}),
"[project]/node_modules/@deck.gl/carto/dist/layers/raster-layer.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$composite$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__CompositeLayer$3e$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/core/dist/lib/composite-layer.js [client] (ecmascript) <export default as CompositeLayer>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$layers$2f$dist$2f$column$2d$layer$2f$column$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__ColumnLayer$3e$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/layers/dist/column-layer/column-layer.js [client] (ecmascript) <export default as ColumnLayer>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$quadbin$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/quadbin-utils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$raster$2d$layer$2d$vertex$2e$glsl$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/raster-layer-vertex.glsl.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/utils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$post$2d$process$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/post-process-utils.js [client] (ecmascript)");
;
;
;
;
;
;
const defaultProps = {
    ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$layers$2f$dist$2f$column$2d$layer$2f$column$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__ColumnLayer$3e$__["ColumnLayer"].defaultProps,
    extruded: false,
    diskResolution: 4,
    vertices: [
        [
            -0.5,
            -0.5
        ],
        [
            0.5,
            -0.5
        ],
        [
            0.5,
            0.5
        ],
        [
            -0.5,
            0.5
        ]
    ]
};
// Modified ColumnLayer with custom vertex shader
// Use RTT to avoid inter-tile seams
class RasterColumnLayer extends (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$post$2d$process$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["RTTModifier"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$layers$2f$dist$2f$column$2d$layer$2f$column$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__ColumnLayer$3e$__["ColumnLayer"]) {
    getShaders() {
        const shaders = super.getShaders();
        const data = this.props.data;
        const BLOCK_WIDTH = data.data.blockSize ?? Math.sqrt(data.length);
        return {
            ...shaders,
            defines: {
                ...shaders.defines,
                BLOCK_WIDTH
            },
            vs: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$raster$2d$layer$2d$vertex$2e$glsl$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"]
        };
    }
    initializeState() {
        // Only add attributes needed by shader
        const attributeManager = this.getAttributeManager();
        /* eslint-disable max-len */ attributeManager.addInstanced({
            instanceElevations: {
                size: 1,
                transition: true,
                accessor: 'getElevation'
            },
            instanceFillColors: {
                size: this.props.colorFormat.length,
                type: 'unorm8',
                transition: true,
                accessor: 'getFillColor',
                defaultValue: [
                    0,
                    0,
                    0,
                    255
                ]
            },
            instanceLineColors: {
                size: this.props.colorFormat.length,
                type: 'unorm8',
                transition: true,
                accessor: 'getLineColor',
                defaultValue: [
                    255,
                    255,
                    255,
                    255
                ]
            }
        });
    }
}
RasterColumnLayer.layerName = 'RasterColumnLayer';
function wrappedDataComparator(oldData, newData) {
    return oldData.data === newData.data && oldData.length === newData.length;
}
// Adapter layer around RasterColumnLayer that converts data & accessors into correct format
class RasterLayer extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$composite$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__CompositeLayer$3e$__["CompositeLayer"] {
    renderLayers() {
        // Rendering props underlying layer
        const { data, getElevation, getFillColor, getLineColor, getLineWidth, tileIndex, updateTriggers } = this.props;
        if (!data || !tileIndex) return null;
        const blockSize = data.blockSize ?? 0;
        const [xOffset, yOffset, scale] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$quadbin$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["quadbinToOffset"])(tileIndex);
        const offset = [
            xOffset,
            yOffset
        ];
        const lineWidthScale = scale / blockSize;
        // Filled Column Layer
        const CellLayer = this.getSubLayerClass('column', RasterColumnLayer);
        const { highlightedObjectIndex, highlightColor } = this.state;
        return new CellLayer(this.props, this.getSubLayerProps({
            id: 'cell',
            updateTriggers,
            getElevation: this.getSubLayerAccessor(getElevation),
            getFillColor: this.getSubLayerAccessor(getFillColor),
            getLineColor: this.getSubLayerAccessor(getLineColor),
            getLineWidth: this.getSubLayerAccessor(getLineWidth)
        }), {
            data: {
                data,
                length: blockSize * blockSize
            },
            dataComparator: wrappedDataComparator,
            offset,
            lineWidthScale,
            highlightedObjectIndex,
            highlightColor,
            // RTT requires blending otherwise opacity < 1 blends with black
            // render target
            parameters: {
                blendColorSrcFactor: 'one',
                blendAlphaSrcFactor: 'one',
                blendColorDstFactor: 'zero',
                blendAlphaDstFactor: 'zero',
                blendColorOperation: 'add',
                blendAlphaOperation: 'add'
            }
        });
    }
    getSubLayerAccessor(accessor) {
        if (typeof accessor !== 'function') {
            return super.getSubLayerAccessor(accessor);
        }
        // Proxy values back in standard feature format
        return (object, info)=>{
            const { data, index } = info;
            const binaryData = data.data;
            const proxy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["createBinaryProxy"])(binaryData.cells, index);
            // @ts-ignore (TS2349) accessor is always function
            return accessor({
                properties: proxy
            }, info);
        };
    }
    getPickingInfo(params) {
        const info = super.getPickingInfo(params);
        if (info.index !== -1) {
            info.object = this.getSubLayerAccessor((x)=>x)(undefined, {
                data: this.props,
                index: info.index
            });
        }
        return info;
    }
    _updateAutoHighlight(info) {
        const { highlightedObjectIndex } = this.state;
        let newHighlightedObjectIndex = -1;
        if (info.index !== -1) {
            newHighlightedObjectIndex = info.index;
        }
        if (highlightedObjectIndex !== newHighlightedObjectIndex) {
            let { highlightColor } = this.props;
            if (typeof highlightColor === 'function') {
                highlightColor = highlightColor(info);
            }
            this.setState({
                highlightColor,
                highlightedObjectIndex: newHighlightedObjectIndex
            });
        }
    }
}
RasterLayer.layerName = 'RasterLayer';
RasterLayer.defaultProps = defaultProps;
const __TURBOPACK__default__export__ = RasterLayer;
 //# sourceMappingURL=raster-layer.js.map
}}),
"[project]/node_modules/@deck.gl/carto/dist/layers/schema/carto-raster-tile.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_context__.s({
    "BandReader": (()=>BandReader),
    "TileReader": (()=>TileReader)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$schema$2f$fast$2d$pbf$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/schema/fast-pbf.js [client] (ecmascript)");
;
const ARRAY_TYPES = {
    uint8: Uint8Array,
    uint16: Uint16Array,
    uint32: Uint32Array,
    uint64: BigUint64Array,
    int8: Int8Array,
    int16: Int16Array,
    int32: Int32Array,
    int64: BigInt64Array,
    float32: Float32Array,
    float64: Float64Array
};
class BandReader {
    static read(pbf, end) {
        return pbf.readFields(BandReader._readField, {
            name: '',
            type: '',
            data: null
        }, end);
    }
    static _readField(tag, obj, pbf) {
        if (tag === 1) obj.name = pbf.readString();
        else if (tag === 2) obj.type = pbf.readString();
        else if (tag === 3) {
            const TypedArray = ARRAY_TYPES[obj.type];
            if (!TypedArray) {
                throw Error(`Invalid data type: ${obj.type}`);
            }
            obj.data = {};
            const { compression } = TileReader;
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$schema$2f$fast$2d$pbf$2e$js__$5b$client$5d$__$28$ecmascript$29$__["readPackedTypedArray"])(TypedArray, pbf, obj.data, {
                compression
            });
        }
    }
}
class TileReader {
    static read(pbf, end) {
        return pbf.readFields(TileReader._readField, {
            blockSize: 0,
            bands: []
        }, end);
    }
    static _readField(tag, obj, pbf) {
        if (tag === 1) obj.blockSize = pbf.readVarint();
        else if (tag === 2) obj.bands.push(BandReader.read(pbf, pbf.readVarint() + pbf.pos));
    }
} //# sourceMappingURL=carto-raster-tile.js.map
}}),
"[project]/node_modules/@deck.gl/carto/dist/layers/schema/carto-raster-tile-loader.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$schema$2f$carto$2d$raster$2d$tile$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/schema/carto-raster-tile.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$schema$2f$tile$2d$loader$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/schema/tile-loader-utils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/utils.js [client] (ecmascript)");
;
;
;
const VERSION = typeof "9.1.8" !== 'undefined' ? "9.1.8" : 'latest';
const id = 'cartoRasterTile';
const DEFAULT_OPTIONS = {
    cartoRasterTile: {
        metadata: null,
        workerUrl: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getWorkerUrl"])(id, VERSION)
    }
};
const CartoRasterTileLoader = {
    name: 'CARTO Raster Tile',
    version: VERSION,
    id,
    module: 'carto',
    extensions: [
        'pbf'
    ],
    mimeTypes: [
        'application/vnd.carto-raster-tile'
    ],
    category: 'geometry',
    parse: async (arrayBuffer, options)=>parseCartoRasterTile(arrayBuffer, options),
    parseSync: parseCartoRasterTile,
    worker: true,
    options: DEFAULT_OPTIONS
};
function parseCartoRasterTile(arrayBuffer, options) {
    const metadata = options?.cartoRasterTile?.metadata;
    if (!arrayBuffer || !metadata) return null;
    // @ts-expect-error Upstream type needs to be updated
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$schema$2f$carto$2d$raster$2d$tile$2e$js__$5b$client$5d$__$28$ecmascript$29$__["TileReader"].compression = metadata.compression;
    const out = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$schema$2f$tile$2d$loader$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["parsePbf"])(arrayBuffer, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$schema$2f$carto$2d$raster$2d$tile$2e$js__$5b$client$5d$__$28$ecmascript$29$__["TileReader"]);
    const { bands, blockSize } = out;
    const numericProps = {};
    for(let i = 0; i < bands.length; i++){
        const { name, data } = bands[i];
        numericProps[name] = data;
    }
    return {
        blockSize,
        cells: {
            numericProps,
            properties: []
        }
    };
}
const __TURBOPACK__default__export__ = CartoRasterTileLoader;
 //# sourceMappingURL=carto-raster-tile-loader.js.map
}}),
"[project]/node_modules/@deck.gl/carto/dist/layers/raster-tile-layer.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__),
    "renderSubLayers": (()=>renderSubLayers)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$composite$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__CompositeLayer$3e$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/core/dist/lib/composite-layer.js [client] (ecmascript) <export default as CompositeLayer>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$raster$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/raster-layer.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$quadbin$2d$tileset$2d$2d$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/quadbin-tileset-2d.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/utils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$constants$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/constants.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$geo$2d$layers$2f$dist$2f$tile$2d$layer$2f$tile$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__TileLayer$3e$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/geo-layers/dist/tile-layer/tile-layer.js [client] (ecmascript) <export default as TileLayer>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$post$2d$process$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/post-process-utils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$loaders$2e$gl$2f$core$2f$dist$2f$lib$2f$api$2f$register$2d$loaders$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@loaders.gl/core/dist/lib/api/register-loaders.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$schema$2f$carto$2d$raster$2d$tile$2d$loader$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/schema/carto-raster-tile-loader.js [client] (ecmascript)");
;
;
;
;
;
;
;
;
;
(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$loaders$2e$gl$2f$core$2f$dist$2f$lib$2f$api$2f$register$2d$loaders$2e$js__$5b$client$5d$__$28$ecmascript$29$__["registerLoaders"])([
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$schema$2f$carto$2d$raster$2d$tile$2d$loader$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"]
]);
const renderSubLayers = (props)=>{
    const tileIndex = props.tile?.index?.q;
    if (!tileIndex) return null;
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$raster$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"](props, {
        tileIndex
    });
};
const defaultProps = {
    data: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["TilejsonPropType"],
    refinementStrategy: 'no-overlap',
    tileSize: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$constants$2e$js__$5b$client$5d$__$28$ecmascript$29$__["DEFAULT_TILE_SIZE"]
};
class PostProcessTileLayer extends (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$post$2d$process$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["PostProcessModifier"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$geo$2d$layers$2f$dist$2f$tile$2d$layer$2f$tile$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__TileLayer$3e$__["TileLayer"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$post$2d$process$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["copy"]) {
    filterSubLayer(context) {
        // Handle DrawCallbackLayer
        const { tile } = context.layer.props;
        if (!tile) return true;
        return super.filterSubLayer(context);
    }
}
class RasterTileLayer extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$lib$2f$composite$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__CompositeLayer$3e$__["CompositeLayer"] {
    getLoadOptions() {
        const loadOptions = super.getLoadOptions() || {};
        const tileJSON = this.props.data;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["injectAccessToken"])(loadOptions, tileJSON.accessToken);
        return loadOptions;
    }
    renderLayers() {
        const tileJSON = this.props.data;
        if (!tileJSON) return null;
        const { tiles: data, minzoom: minZoom, maxzoom: maxZoom, raster_metadata: metadata } = tileJSON;
        const SubLayerClass = this.getSubLayerClass('tile', PostProcessTileLayer);
        return new SubLayerClass(this.props, {
            id: `raster-tile-layer-${this.props.id}`,
            data,
            // TODO: Tileset2D should be generic over TileIndex type
            TilesetClass: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$quadbin$2d$tileset$2d$2d$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"],
            renderSubLayers,
            minZoom,
            maxZoom,
            loadOptions: {
                cartoRasterTile: {
                    metadata
                },
                ...this.getLoadOptions()
            }
        });
    }
}
RasterTileLayer.layerName = 'RasterTileLayer';
RasterTileLayer.defaultProps = defaultProps;
const __TURBOPACK__default__export__ = RasterTileLayer;
 //# sourceMappingURL=raster-tile-layer.js.map
}}),
"[project]/node_modules/@deck.gl/carto/dist/layers/schema/carto-properties-tile.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_context__.s({
    "TileReader": (()=>TileReader)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$schema$2f$carto$2d$tile$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/schema/carto-tile.js [client] (ecmascript)");
;
class TileReader {
    static read(pbf, end) {
        return pbf.readFields(TileReader._readField, {
            properties: [],
            numericProps: {}
        }, end);
    }
    static _readField(tag, obj, pbf) {
        if (tag === 1) obj.properties.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$schema$2f$carto$2d$tile$2e$js__$5b$client$5d$__$28$ecmascript$29$__["PropertiesReader"].read(pbf, pbf.readVarint() + pbf.pos));
        else if (tag === 2) {
            const entry = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$schema$2f$carto$2d$tile$2e$js__$5b$client$5d$__$28$ecmascript$29$__["NumericPropKeyValueReader"].read(pbf, pbf.readVarint() + pbf.pos);
            obj.numericProps[entry.key] = entry.value;
        }
    }
} //# sourceMappingURL=carto-properties-tile.js.map
}}),
"[project]/node_modules/@deck.gl/carto/dist/layers/schema/carto-properties-tile-loader.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$schema$2f$carto$2d$properties$2d$tile$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/schema/carto-properties-tile.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$schema$2f$tile$2d$loader$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/schema/tile-loader-utils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/utils.js [client] (ecmascript)");
;
;
;
const VERSION = typeof "9.1.8" !== 'undefined' ? "9.1.8" : 'latest';
const id = 'cartoPropertiesTile';
const DEFAULT_OPTIONS = {
    cartoPropertiesTile: {
        workerUrl: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getWorkerUrl"])(id, VERSION)
    }
};
const CartoPropertiesTileLoader = {
    name: 'CARTO Properties Tile',
    version: VERSION,
    id,
    module: 'carto',
    extensions: [
        'pbf'
    ],
    mimeTypes: [
        'application/vnd.carto-properties-tile'
    ],
    category: 'geometry',
    worker: true,
    parse: async (arrayBuffer, options)=>parseCartoPropertiesTile(arrayBuffer, options),
    parseSync: parseCartoPropertiesTile,
    options: DEFAULT_OPTIONS
};
function parseCartoPropertiesTile(arrayBuffer, options) {
    if (!arrayBuffer) return null;
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$schema$2f$tile$2d$loader$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["parsePbf"])(arrayBuffer, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$schema$2f$carto$2d$properties$2d$tile$2e$js__$5b$client$5d$__$28$ecmascript$29$__["TileReader"]);
}
const __TURBOPACK__default__export__ = CartoPropertiesTileLoader;
 //# sourceMappingURL=carto-properties-tile-loader.js.map
}}),
"[project]/node_modules/@deck.gl/carto/dist/layers/schema/carto-vector-tile-loader.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$earcut$2f$src$2f$earcut$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/earcut/src/earcut.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$schema$2f$carto$2d$tile$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/schema/carto-tile.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$schema$2f$tile$2d$loader$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/schema/tile-loader-utils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/utils.js [client] (ecmascript)");
;
;
;
;
const VERSION = typeof "9.1.8" !== 'undefined' ? "9.1.8" : 'latest';
const id = 'cartoVectorTile';
const DEFAULT_OPTIONS = {
    cartoVectorTile: {
        workerUrl: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getWorkerUrl"])(id, VERSION)
    }
};
const CartoVectorTileLoader = {
    name: 'CARTO Vector Tile',
    version: VERSION,
    id,
    module: 'carto',
    extensions: [
        'pbf'
    ],
    mimeTypes: [
        'application/vnd.carto-vector-tile'
    ],
    category: 'geometry',
    parse: async (arrayBuffer, options)=>parseCartoVectorTile(arrayBuffer, options),
    parseSync: parseCartoVectorTile,
    worker: true,
    options: DEFAULT_OPTIONS
};
function triangulatePolygon(polygons, target, { startPosition, endPosition, indices }) {
    const coordLength = polygons.positions.size;
    const start = startPosition * coordLength;
    const end = endPosition * coordLength;
    // Extract positions and holes for just this polygon
    const polygonPositions = polygons.positions.value.subarray(start, end);
    // Holes are referenced relative to outer polygon
    const holes = indices.slice(1).map((n)=>n - startPosition);
    // Compute triangulation
    const triangles = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$earcut$2f$src$2f$earcut$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"])(polygonPositions, holes, coordLength);
    // Indices returned by triangulation are relative to start
    // of polygon, so we need to offset
    for(let t = 0, tl = triangles.length; t < tl; ++t){
        target.push(startPosition + triangles[t]);
    }
}
function triangulate(polygons) {
    const { polygonIndices, primitivePolygonIndices } = polygons;
    const triangles = [];
    let rangeStart = 0;
    for(let i = 0; i < polygonIndices.value.length - 1; i++){
        const startPosition = polygonIndices.value[i];
        const endPosition = polygonIndices.value[i + 1];
        // Extract hole indices between start & end position
        const rangeEnd = primitivePolygonIndices.value.indexOf(endPosition);
        const indices = primitivePolygonIndices.value.subarray(rangeStart, rangeEnd);
        rangeStart = rangeEnd;
        triangulatePolygon(polygons, triangles, {
            startPosition,
            endPosition,
            indices
        });
    }
    polygons.triangles = {
        value: new Uint32Array(triangles),
        size: 1
    };
}
function parseCartoVectorTile(arrayBuffer, options) {
    if (!arrayBuffer) return null;
    const tile = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$schema$2f$tile$2d$loader$2d$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["parsePbf"])(arrayBuffer, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$schema$2f$carto$2d$tile$2e$js__$5b$client$5d$__$28$ecmascript$29$__["TileReader"]);
    if (tile.polygons && !tile.polygons.triangles) {
        triangulate(tile.polygons);
    }
    return tile;
}
const __TURBOPACK__default__export__ = CartoVectorTileLoader;
 //# sourceMappingURL=carto-vector-tile-loader.js.map
}}),
"[project]/node_modules/@deck.gl/carto/dist/layers/vector-tile-layer.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$loaders$2e$gl$2f$core$2f$dist$2f$lib$2f$api$2f$register$2d$loaders$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@loaders.gl/core/dist/lib/api/register-loaders.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$schema$2f$carto$2d$properties$2d$tile$2d$loader$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/schema/carto-properties-tile-loader.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$schema$2f$carto$2d$vector$2d$tile$2d$loader$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/schema/carto-vector-tile-loader.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$extensions$2f$dist$2f$clip$2f$clip$2d$extension$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__ClipExtension$3e$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/extensions/dist/clip/clip-extension.js [client] (ecmascript) <export default as ClipExtension>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$extensions$2f$dist$2f$collision$2d$filter$2f$collision$2d$filter$2d$extension$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__CollisionFilterExtension$3e$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/extensions/dist/collision-filter/collision-filter-extension.js [client] (ecmascript) <export default as CollisionFilterExtension>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$geo$2d$layers$2f$dist$2f$mvt$2d$layer$2f$mvt$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__MVTLayer$3e$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/geo-layers/dist/mvt-layer/mvt-layer.js [client] (ecmascript) <export default as MVTLayer>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$geo$2d$layers$2f$dist$2f$tileset$2d$2d$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__getURLFromTemplate__as__$5f$getURLFromTemplate$3e$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/geo-layers/dist/tileset-2d/utils.js [client] (ecmascript) <export getURLFromTemplate as _getURLFromTemplate>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$layers$2f$dist$2f$geojson$2d$layer$2f$geojson$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__GeoJsonLayer$3e$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/layers/dist/geojson-layer/geojson-layer.js [client] (ecmascript) <export default as GeoJsonLayer>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/utils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$constants$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/constants.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$point$2d$label$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/point-label-layer.js [client] (ecmascript)");
;
;
;
(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$loaders$2e$gl$2f$core$2f$dist$2f$lib$2f$api$2f$register$2d$loaders$2e$js__$5b$client$5d$__$28$ecmascript$29$__["registerLoaders"])([
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$schema$2f$carto$2d$properties$2d$tile$2d$loader$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"],
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$schema$2f$carto$2d$vector$2d$tile$2d$loader$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"]
]);
;
;
;
;
;
;
const defaultProps = {
    ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$geo$2d$layers$2f$dist$2f$mvt$2d$layer$2f$mvt$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__MVTLayer$3e$__["MVTLayer"].defaultProps,
    data: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["TilejsonPropType"],
    dataComparator: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["TilejsonPropType"].equal,
    tileSize: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$constants$2e$js__$5b$client$5d$__$28$ecmascript$29$__["DEFAULT_TILE_SIZE"]
};
// @ts-ignore
class VectorTileLayer extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$geo$2d$layers$2f$dist$2f$mvt$2d$layer$2f$mvt$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__MVTLayer$3e$__["MVTLayer"] {
    constructor(...propObjects){
        // Force externally visible props type, as it is not possible modify via extension
        // @ts-ignore
        super(...propObjects);
    }
    initializeState() {
        super.initializeState();
        this.setState({
            binary: true
        });
    }
    updateState(parameters) {
        const { props } = parameters;
        if (props.data) {
            super.updateState(parameters);
            const formatTiles = new URL(props.data.tiles[0]).searchParams.get('formatTiles');
            const mvt = formatTiles === 'mvt';
            this.setState({
                mvt
            });
        }
    }
    getLoadOptions() {
        const loadOptions = super.getLoadOptions() || {};
        const tileJSON = this.props.data;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["injectAccessToken"])(loadOptions, tileJSON.accessToken);
        loadOptions.gis = {
            format: 'binary'
        }; // Use binary for MVT loading
        return loadOptions;
    }
    /* eslint-disable camelcase */ async getTileData(tile) {
        const tileJSON = this.props.data;
        const { tiles, properties_tiles } = tileJSON;
        const url = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$geo$2d$layers$2f$dist$2f$tileset$2d$2d$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__getURLFromTemplate__as__$5f$getURLFromTemplate$3e$__["_getURLFromTemplate"])(tiles, tile);
        if (!url) {
            return Promise.reject('Invalid URL');
        }
        const loadOptions = this.getLoadOptions();
        const { fetch } = this.props;
        const { signal } = tile;
        // Fetch geometry and attributes separately
        const geometryFetch = fetch(url, {
            propName: 'data',
            layer: this,
            loadOptions,
            signal
        });
        if (!properties_tiles) {
            return await geometryFetch;
        }
        const propertiesUrl = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$geo$2d$layers$2f$dist$2f$tileset$2d$2d$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__getURLFromTemplate__as__$5f$getURLFromTemplate$3e$__["_getURLFromTemplate"])(properties_tiles, tile);
        if (!propertiesUrl) {
            return Promise.reject('Invalid properties URL');
        }
        const attributesFetch = fetch(propertiesUrl, {
            propName: 'data',
            layer: this,
            loadOptions,
            signal
        });
        const [geometry, attributes] = await Promise.all([
            geometryFetch,
            attributesFetch
        ]);
        if (!geometry) return null;
        return attributes ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["mergeBoundaryData"])(geometry, attributes) : geometry;
    }
    /* eslint-enable camelcase */ renderSubLayers(props) {
        if (props.data === null) {
            return null;
        }
        if (this.state.mvt) {
            return super.renderSubLayers(props);
        }
        const tileBbox = props.tile.bbox;
        const { west, south, east, north } = tileBbox;
        const extensions = [
            new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$extensions$2f$dist$2f$clip$2f$clip$2d$extension$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__ClipExtension$3e$__["ClipExtension"](),
            ...props.extensions || []
        ];
        const clipProps = {
            clipBounds: [
                west,
                south,
                east,
                north
            ]
        };
        const applyClipExtensionToSublayerProps = (subLayerId)=>{
            return {
                [subLayerId]: {
                    ...clipProps,
                    ...props?._subLayerProps?.[subLayerId],
                    extensions: [
                        ...extensions,
                        ...props?._subLayerProps?.[subLayerId]?.extensions || []
                    ]
                }
            };
        };
        const defaultToPointLabelLayer = {
            'points-text': {
                type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$point$2d$label$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"],
                ...props?._subLayerProps?.['points-text'],
                extensions: [
                    new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$extensions$2f$dist$2f$collision$2d$filter$2f$collision$2d$filter$2d$extension$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__CollisionFilterExtension$3e$__["CollisionFilterExtension"](),
                    ...props.extensions || [],
                    ...props?._subLayerProps?.['points-text']?.extensions || []
                ]
            }
        };
        const subLayerProps = {
            ...props,
            autoHighlight: false,
            // Do not perform clipping on points (#9059)
            _subLayerProps: {
                ...props._subLayerProps,
                ...defaultToPointLabelLayer,
                ...applyClipExtensionToSublayerProps('polygons-fill'),
                ...applyClipExtensionToSublayerProps('polygons-stroke'),
                ...applyClipExtensionToSublayerProps('linestrings')
            }
        };
        const subLayer = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$layers$2f$dist$2f$geojson$2d$layer$2f$geojson$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__GeoJsonLayer$3e$__["GeoJsonLayer"](subLayerProps);
        return subLayer;
    }
    _isWGS84() {
        // CARTO binary tile coordinates are [lng, lat], not tile-relative like MVT.
        if (this.state.mvt) return super._isWGS84();
        return true;
    }
}
VectorTileLayer.layerName = 'VectorTileLayer';
VectorTileLayer.defaultProps = defaultProps;
const __TURBOPACK__default__export__ = VectorTileLayer;
 //# sourceMappingURL=vector-tile-layer.js.map
}}),
"[project]/node_modules/@deck.gl/carto/dist/basemap.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_context__.s({
    "CARTO_MAP_STYLES": (()=>CARTO_MAP_STYLES),
    "GOOGLE_BASEMAPS": (()=>GOOGLE_BASEMAPS),
    "STYLE_LAYER_GROUPS": (()=>STYLE_LAYER_GROUPS),
    "applyLayerGroupFilters": (()=>applyLayerGroupFilters),
    "default": (()=>__TURBOPACK__default__export__),
    "fetchStyle": (()=>fetchStyle),
    "getStyleUrl": (()=>getStyleUrl),
    "someLayerGroupsDisabled": (()=>someLayerGroupsDisabled)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$carto$2f$api$2d$client$2f$build$2f$api$2d$client$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@carto/api-client/build/api-client.modern.js [client] (ecmascript)");
;
const cartoStyleUrlTemplate = 'https://basemaps.cartocdn.com/gl/{basemap}-gl-style/style.json';
const CARTO_MAP_STYLES = [
    'positron',
    'dark-matter',
    'voyager'
];
const GOOGLE_BASEMAPS = {
    roadmap: {
        mapTypeId: 'roadmap',
        mapId: '3754c817b510f791'
    },
    'google-positron': {
        mapTypeId: 'roadmap',
        mapId: 'ea84ae4203ef21cd'
    },
    'google-dark-matter': {
        mapTypeId: 'roadmap',
        mapId: '2fccc3b36c22a0e2'
    },
    'google-voyager': {
        mapTypeId: 'roadmap',
        mapId: '885caf1e15bb9ef2'
    },
    satellite: {
        mapTypeId: 'satellite'
    },
    hybrid: {
        mapTypeId: 'hybrid'
    },
    terrain: {
        mapTypeId: 'terrain'
    }
};
const STYLE_LAYER_GROUPS = [
    {
        slug: 'label',
        filter: ({ id })=>Boolean(id.match(/(?=(label|_label|place-|place_|poi-|poi_|watername_|roadname_|housenumber))/)),
        defaultVisibility: true
    },
    {
        slug: 'road',
        filter: ({ id })=>Boolean(id.match(/(?=(road|railway|tunnel|street|bridge))(?!.*label)/)),
        defaultVisibility: true
    },
    {
        slug: 'border',
        filter: ({ id })=>Boolean(id.match(/border|boundaries|boundary_/)),
        defaultVisibility: false
    },
    {
        slug: 'building',
        filter: ({ id })=>Boolean(id.match(/building/)),
        defaultVisibility: true
    },
    {
        slug: 'water',
        filter: ({ id })=>Boolean(id.match(/(?=(water|stream|ferry))/)),
        defaultVisibility: true
    },
    {
        slug: 'land',
        filter: ({ id })=>Boolean(id.match(/(?=(parks|landcover|industrial|sand|hillshade|park_))/)),
        defaultVisibility: true
    }
];
function applyLayerGroupFilters(style, visibleLayerGroups) {
    if (!Array.isArray(style?.layers)) {
        return style;
    }
    const removedLayerFilters = STYLE_LAYER_GROUPS.filter((lg)=>!visibleLayerGroups[lg.slug]).map((lg)=>lg.filter);
    const visibleLayers = style.layers.filter((layer)=>removedLayerFilters.every((match)=>!match(layer)));
    return {
        ...style,
        layers: visibleLayers
    };
}
function someLayerGroupsDisabled(visibleLayerGroups) {
    return visibleLayerGroups && Object.values(visibleLayerGroups).every(Boolean) === false;
}
function getStyleUrl(styleType) {
    return cartoStyleUrlTemplate.replace('{basemap}', styleType);
}
async function fetchStyle({ styleUrl, errorContext }) {
    /* global fetch */ let response;
    return await fetch(styleUrl, {
        mode: 'cors'
    }).then((res)=>{
        response = res;
        return res.json();
    }).catch((error)=>{
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$carto$2f$api$2d$client$2f$build$2f$api$2d$client$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["CartoAPIError"](error, {
            ...errorContext,
            requestType: 'Basemap style'
        }, response);
    });
}
const __TURBOPACK__default__export__ = {
    VOYAGER: getStyleUrl('voyager'),
    POSITRON: getStyleUrl('positron'),
    DARK_MATTER: getStyleUrl('dark-matter'),
    VOYAGER_NOLABELS: getStyleUrl('voyager-nolabels'),
    POSITRON_NOLABELS: getStyleUrl('positron-nolabels'),
    DARK_MATTER_NOLABELS: getStyleUrl('dark-matter-nolabels')
};
 //# sourceMappingURL=basemap.js.map
}}),
"[project]/node_modules/@deck.gl/carto/dist/style/palette.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_context__.s({
    "DEFAULT_PALETTE": (()=>DEFAULT_PALETTE),
    "NULL_COLOR": (()=>NULL_COLOR),
    "OTHERS_COLOR": (()=>OTHERS_COLOR),
    "default": (()=>getPalette),
    "hexToRgb": (()=>hexToRgb)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cartocolor$2f$dist$2f$cartocolor$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cartocolor/dist/cartocolor.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/utils.js [client] (ecmascript)");
;
;
const DEFAULT_PALETTE = 'PurpOr';
const NULL_COLOR = [
    204,
    204,
    204
];
const OTHERS_COLOR = [
    119,
    119,
    119
];
function getPalette(name, numCategories) {
    const palette = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cartocolor$2f$dist$2f$cartocolor$2e$js__$5b$client$5d$__$28$ecmascript$29$__[name];
    let paletteIndex = numCategories;
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["assert"])(palette, `Palette "${name}" not found. Expected a CARTOColors string`);
    const palettesColorVariants = Object.keys(palette).filter((p)=>p !== 'tags').map(Number);
    const longestPaletteIndex = Math.max(...palettesColorVariants);
    const smallestPaletteIndex = Math.min(...palettesColorVariants);
    if (!Number.isInteger(numCategories) || numCategories > longestPaletteIndex) {
        paletteIndex = longestPaletteIndex;
    } else if (numCategories < smallestPaletteIndex) {
        paletteIndex = smallestPaletteIndex;
    }
    let colors = palette[paletteIndex];
    if (palette.tags && palette.tags.includes('qualitative')) {
        colors = colors.slice(0, -1);
    }
    return colors.map((c)=>hexToRgb(c));
}
function hexToRgb(hex) {
    // Evaluate #ABC
    let result = /^#?([a-f\d]{1})([a-f\d]{1})([a-f\d]{1})$/i.exec(hex);
    if (result) {
        return [
            parseInt(result[1] + result[1], 16),
            parseInt(result[2] + result[2], 16),
            parseInt(result[3] + result[3], 16),
            255
        ];
    }
    // Evaluate #ABCD
    result = /^#?([a-f\d]{1})([a-f\d]{1})([a-f\d]{1})([a-f\d]{1})$/i.exec(hex);
    if (result) {
        return [
            parseInt(result[1] + result[1], 16),
            parseInt(result[2] + result[2], 16),
            parseInt(result[3] + result[3], 16),
            parseInt(result[4] + result[4], 16)
        ];
    }
    // Evaluate #ABCDEF
    result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    if (result) {
        return [
            parseInt(result[1], 16),
            parseInt(result[2], 16),
            parseInt(result[3], 16),
            255
        ];
    }
    // Evaluate #ABCDEFAF
    result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["assert"])(result, `Hexadecimal color "${hex}" was not parsed correctly`);
    return [
        parseInt(result[1], 16),
        parseInt(result[2], 16),
        parseInt(result[3], 16),
        parseInt(result[4], 16)
    ];
} //# sourceMappingURL=palette.js.map
}}),
"[project]/node_modules/@deck.gl/carto/dist/style/utils.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_context__.s({
    "getAttrValue": (()=>getAttrValue)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/utils.js [client] (ecmascript)");
;
const ALLOWED_ATTR_TYPES = Object.freeze([
    'function',
    'string'
]);
function getAttrValue(attr, d, info) {
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["assert"])(typeof d === 'object', 'Expected "data" to be an object');
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["assert"])(ALLOWED_ATTR_TYPES.includes(typeof attr), 'Expected "attr" to be a function or string');
    // Is function
    if (typeof attr === 'function') {
        return attr(d, info);
    }
    return d?.properties?.[attr];
} //# sourceMappingURL=utils.js.map
}}),
"[project]/node_modules/@deck.gl/carto/dist/style/color-bins-style.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_context__.s({
    "default": (()=>colorBins)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$d3$2d$scale$2f$src$2f$threshold$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__scaleThreshold$3e$__ = __turbopack_context__.i("[project]/node_modules/d3-scale/src/threshold.js [client] (ecmascript) <export default as scaleThreshold>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$style$2f$palette$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/style/palette.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/utils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$style$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/style/utils.js [client] (ecmascript)");
;
;
;
;
function colorBins({ attr, domain, colors = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$style$2f$palette$2e$js__$5b$client$5d$__$28$ecmascript$29$__["DEFAULT_PALETTE"], nullColor = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$style$2f$palette$2e$js__$5b$client$5d$__$28$ecmascript$29$__["NULL_COLOR"] }) {
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["assert"])(Array.isArray(domain), 'Expected "domain" to be an array of numbers');
    const palette = typeof colors === 'string' ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$style$2f$palette$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"])(colors, domain.length + 1) : colors;
    const color = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$d3$2d$scale$2f$src$2f$threshold$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__scaleThreshold$3e$__["scaleThreshold"])().domain(domain).range(palette);
    return (d, info)=>{
        const value = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$style$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getAttrValue"])(attr, d, info);
        return typeof value === 'number' && Number.isFinite(value) ? color(value) : nullColor;
    };
} //# sourceMappingURL=color-bins-style.js.map
}}),
"[project]/node_modules/@deck.gl/carto/dist/style/color-categories-style.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_context__.s({
    "default": (()=>colorCategories)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$style$2f$palette$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/style/palette.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/utils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$style$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/style/utils.js [client] (ecmascript)");
;
;
;
function colorCategories({ attr, domain, colors = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$style$2f$palette$2e$js__$5b$client$5d$__$28$ecmascript$29$__["DEFAULT_PALETTE"], nullColor = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$style$2f$palette$2e$js__$5b$client$5d$__$28$ecmascript$29$__["NULL_COLOR"], othersColor = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$style$2f$palette$2e$js__$5b$client$5d$__$28$ecmascript$29$__["OTHERS_COLOR"] }) {
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["assert"])(Array.isArray(domain), 'Expected "domain" to be an array of numbers or strings');
    const colorsByCategory = {};
    const palette = typeof colors === 'string' ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$style$2f$palette$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"])(colors, domain.length) : colors;
    for (const [i, c] of domain.entries()){
        colorsByCategory[c] = palette[i];
    }
    return (d, info)=>{
        const value = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$style$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getAttrValue"])(attr, d, info);
        return typeof value === 'number' && Number.isFinite(value) || typeof value === 'string' ? colorsByCategory[value] || othersColor : nullColor;
    };
} //# sourceMappingURL=color-categories-style.js.map
}}),
"[project]/node_modules/@deck.gl/carto/dist/style/color-continuous-style.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_context__.s({
    "default": (()=>colorContinuous)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$d3$2d$scale$2f$src$2f$linear$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__scaleLinear$3e$__ = __turbopack_context__.i("[project]/node_modules/d3-scale/src/linear.js [client] (ecmascript) <export default as scaleLinear>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$style$2f$palette$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/style/palette.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/utils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$style$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/style/utils.js [client] (ecmascript)");
;
;
;
;
function colorContinuous({ attr, domain, colors = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$style$2f$palette$2e$js__$5b$client$5d$__$28$ecmascript$29$__["DEFAULT_PALETTE"], nullColor = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$style$2f$palette$2e$js__$5b$client$5d$__$28$ecmascript$29$__["NULL_COLOR"] }) {
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["assert"])(Array.isArray(domain), 'Expected "domain" to be an array of numbers');
    const palette = typeof colors === 'string' ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$style$2f$palette$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"])(colors, domain.length) : colors;
    const color = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$d3$2d$scale$2f$src$2f$linear$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__scaleLinear$3e$__["scaleLinear"])().domain(domain).range(palette);
    return (d, info)=>{
        const value = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$style$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getAttrValue"])(attr, d, info);
        return typeof value === 'number' && Number.isFinite(value) ? color(value) : nullColor;
    };
} //# sourceMappingURL=color-continuous-style.js.map
}}),
"[project]/node_modules/@deck.gl/carto/dist/api/layer-map.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_context__.s({
    "AGGREGATION": (()=>AGGREGATION),
    "OPACITY_MAP": (()=>OPACITY_MAP),
    "_domainFromValues": (()=>domainFromValues),
    "getColorAccessor": (()=>getColorAccessor),
    "getColorValueAccessor": (()=>getColorValueAccessor),
    "getIconUrlAccessor": (()=>getIconUrlAccessor),
    "getLayer": (()=>getLayer),
    "getMaxMarkerSize": (()=>getMaxMarkerSize),
    "getSizeAccessor": (()=>getSizeAccessor),
    "getTextAccessor": (()=>getTextAccessor),
    "negateAccessor": (()=>negateAccessor),
    "opacityToAlpha": (()=>opacityToAlpha)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$d3$2d$array$2f$src$2f$deviation$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__deviation$3e$__ = __turbopack_context__.i("[project]/node_modules/d3-array/src/deviation.js [client] (ecmascript) <export default as deviation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$d3$2d$array$2f$src$2f$extent$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__extent$3e$__ = __turbopack_context__.i("[project]/node_modules/d3-array/src/extent.js [client] (ecmascript) <export default as extent>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$d3$2d$array$2f$src$2f$groupSort$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__groupSort$3e$__ = __turbopack_context__.i("[project]/node_modules/d3-array/src/groupSort.js [client] (ecmascript) <export default as groupSort>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$d3$2d$array$2f$src$2f$median$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__median$3e$__ = __turbopack_context__.i("[project]/node_modules/d3-array/src/median.js [client] (ecmascript) <export default as median>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$d3$2d$array$2f$src$2f$variance$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__variance$3e$__ = __turbopack_context__.i("[project]/node_modules/d3-array/src/variance.js [client] (ecmascript) <export default as variance>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$d3$2d$color$2f$src$2f$color$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/d3-color/src/color.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$d3$2d$scale$2f$src$2f$linear$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__scaleLinear$3e$__ = __turbopack_context__.i("[project]/node_modules/d3-scale/src/linear.js [client] (ecmascript) <export default as scaleLinear>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$d3$2d$scale$2f$src$2f$ordinal$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__scaleOrdinal$3e$__ = __turbopack_context__.i("[project]/node_modules/d3-scale/src/ordinal.js [client] (ecmascript) <export default as scaleOrdinal>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$d3$2d$scale$2f$src$2f$log$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__scaleLog$3e$__ = __turbopack_context__.i("[project]/node_modules/d3-scale/src/log.js [client] (ecmascript) <export default as scaleLog>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$d3$2d$scale$2f$src$2f$band$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__point__as__scalePoint$3e$__ = __turbopack_context__.i("[project]/node_modules/d3-scale/src/band.js [client] (ecmascript) <export point as scalePoint>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$d3$2d$scale$2f$src$2f$quantile$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__scaleQuantile$3e$__ = __turbopack_context__.i("[project]/node_modules/d3-scale/src/quantile.js [client] (ecmascript) <export default as scaleQuantile>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$d3$2d$scale$2f$src$2f$quantize$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__scaleQuantize$3e$__ = __turbopack_context__.i("[project]/node_modules/d3-scale/src/quantize.js [client] (ecmascript) <export default as scaleQuantize>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$d3$2d$scale$2f$src$2f$pow$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__sqrt__as__scaleSqrt$3e$__ = __turbopack_context__.i("[project]/node_modules/d3-scale/src/pow.js [client] (ecmascript) <export sqrt as scaleSqrt>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$d3$2d$scale$2f$src$2f$threshold$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__scaleThreshold$3e$__ = __turbopack_context__.i("[project]/node_modules/d3-scale/src/threshold.js [client] (ecmascript) <export default as scaleThreshold>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$d3$2d$format$2f$src$2f$defaultLocale$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/d3-format/src/defaultLocale.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$moment$2d$timezone$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/moment-timezone/index.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$aggregation$2d$layers$2f$dist$2f$grid$2d$layer$2f$grid$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__GridLayer$3e$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/aggregation-layers/dist/grid-layer/grid-layer.js [client] (ecmascript) <export default as GridLayer>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$aggregation$2d$layers$2f$dist$2f$heatmap$2d$layer$2f$heatmap$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__HeatmapLayer$3e$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/aggregation-layers/dist/heatmap-layer/heatmap-layer.js [client] (ecmascript) <export default as HeatmapLayer>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$aggregation$2d$layers$2f$dist$2f$hexagon$2d$layer$2f$hexagon$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__HexagonLayer$3e$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/aggregation-layers/dist/hexagon-layer/hexagon-layer.js [client] (ecmascript) <export default as HexagonLayer>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$layers$2f$dist$2f$geojson$2d$layer$2f$geojson$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__GeoJsonLayer$3e$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/layers/dist/geojson-layer/geojson-layer.js [client] (ecmascript) <export default as GeoJsonLayer>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$geo$2d$layers$2f$dist$2f$h3$2d$layers$2f$h3$2d$hexagon$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__H3HexagonLayer$3e$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/geo-layers/dist/h3-layers/h3-hexagon-layer.js [client] (ecmascript) <export default as H3HexagonLayer>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$cluster$2d$tile$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/cluster-tile-layer.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$h3$2d$tile$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/h3-tile-layer.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$quadbin$2d$tile$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/quadbin-tile-layer.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$raster$2d$tile$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/raster-tile-layer.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$vector$2d$tile$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/vector-tile-layer.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/utils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$heatmap$2d$tile$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/heatmap-tile-layer.js [client] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
const SCALE_FUNCS = {
    linear: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$d3$2d$scale$2f$src$2f$linear$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__scaleLinear$3e$__["scaleLinear"],
    ordinal: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$d3$2d$scale$2f$src$2f$ordinal$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__scaleOrdinal$3e$__["scaleOrdinal"],
    log: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$d3$2d$scale$2f$src$2f$log$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__scaleLog$3e$__["scaleLog"],
    point: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$d3$2d$scale$2f$src$2f$band$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__point__as__scalePoint$3e$__["scalePoint"],
    quantile: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$d3$2d$scale$2f$src$2f$quantile$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__scaleQuantile$3e$__["scaleQuantile"],
    quantize: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$d3$2d$scale$2f$src$2f$quantize$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__scaleQuantize$3e$__["scaleQuantize"],
    sqrt: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$d3$2d$scale$2f$src$2f$pow$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__sqrt__as__scaleSqrt$3e$__["scaleSqrt"],
    custom: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$d3$2d$scale$2f$src$2f$threshold$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__scaleThreshold$3e$__["scaleThreshold"],
    identity: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["scaleIdentity"]
};
function identity(v) {
    return v;
}
const UNKNOWN_COLOR = '#868d91';
const AGGREGATION = {
    average: 'MEAN',
    maximum: 'MAX',
    minimum: 'MIN',
    sum: 'SUM'
};
const OPACITY_MAP = {
    getFillColor: 'opacity',
    getLineColor: 'strokeOpacity',
    getTextColor: 'opacity'
};
const AGGREGATION_FUNC = {
    'count unique': (values, accessor)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$d3$2d$array$2f$src$2f$groupSort$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__groupSort$3e$__["groupSort"])(values, (v)=>v.length, accessor).length,
    median: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$d3$2d$array$2f$src$2f$median$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__median$3e$__["median"],
    // Unfortunately mode() is only available in d3-array@3+ which is ESM only
    mode: (values, accessor)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$d3$2d$array$2f$src$2f$groupSort$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__groupSort$3e$__["groupSort"])(values, (v)=>v.length, accessor).pop(),
    stddev: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$d3$2d$array$2f$src$2f$deviation$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__deviation$3e$__["deviation"],
    variance: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$d3$2d$array$2f$src$2f$variance$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__variance$3e$__["variance"]
};
const TILE_LAYER_TYPE_TO_LAYER = {
    clusterTile: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$cluster$2d$tile$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"],
    h3: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$h3$2d$tile$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"],
    heatmapTile: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$heatmap$2d$tile$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"],
    mvt: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$vector$2d$tile$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"],
    quadbin: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$quadbin$2d$tile$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"],
    raster: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$raster$2d$tile$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"],
    tileset: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$vector$2d$tile$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"]
};
const hexToRGBA = (c)=>{
    const { r, g, b, opacity } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$d3$2d$color$2f$src$2f$color$2e$js__$5b$client$5d$__$28$ecmascript$29$__["rgb"])(c);
    return [
        r,
        g,
        b,
        255 * opacity
    ];
};
// Kepler prop value -> Deck.gl prop value
// Supports nested definitions, and function transforms:
//   {keplerProp: 'deckProp'} is equivalent to:
//   {keplerProp: x => ({deckProp: x})}
const sharedPropMap = {
    // Apply the value of Kepler `color` prop to the deck `getFillColor` prop
    color: 'getFillColor',
    isVisible: 'visible',
    label: 'cartoLabel',
    textLabel: {
        alignment: 'getTextAlignmentBaseline',
        anchor: 'getTextAnchor',
        // Apply the value of Kepler `textLabel.color` prop to the deck `getTextColor` prop
        color: 'getTextColor',
        size: 'getTextSize'
    },
    visConfig: {
        enable3d: 'extruded',
        elevationScale: 'elevationScale',
        filled: 'filled',
        strokeColor: 'getLineColor',
        stroked: 'stroked',
        thickness: 'getLineWidth',
        radius: 'getPointRadius',
        wireframe: 'wireframe'
    }
};
const customMarkersPropsMap = {
    color: 'getIconColor',
    visConfig: {
        radius: 'getIconSize'
    }
};
const heatmapTilePropsMap = {
    visConfig: {
        colorRange: (x)=>({
                colorRange: x.colors.map(hexToRGBA)
            }),
        radius: 'radiusPixels'
    }
};
const aggregationVisConfig = {
    colorAggregation: (x)=>({
            colorAggregation: AGGREGATION[x] || AGGREGATION.sum
        }),
    colorRange: (x)=>({
            colorRange: x.colors.map(hexToRGBA)
        }),
    coverage: 'coverage',
    elevationPercentile: [
        'elevationLowerPercentile',
        'elevationUpperPercentile'
    ],
    percentile: [
        'lowerPercentile',
        'upperPercentile'
    ]
};
const defaultProps = {
    lineMiterLimit: 2,
    lineWidthUnits: 'pixels',
    pointRadiusUnits: 'pixels',
    rounded: true,
    wrapLongitude: false
};
function mergePropMaps(a = {}, b = {}) {
    return {
        ...a,
        ...b,
        visConfig: {
            ...a.visConfig,
            ...b.visConfig
        }
    };
}
function getLayer(type, config, dataset) {
    let basePropMap = sharedPropMap;
    if (config.visConfig?.customMarkers) {
        basePropMap = mergePropMaps(basePropMap, customMarkersPropsMap);
    }
    if (type === 'heatmapTile') {
        basePropMap = mergePropMaps(basePropMap, heatmapTilePropsMap);
    }
    if (TILE_LAYER_TYPE_TO_LAYER[type]) {
        return getTileLayer(dataset, basePropMap, type);
    }
    const geoColumn = dataset?.geoColumn;
    const getPosition = (d)=>d[geoColumn].coordinates;
    const hexagonId = config.columns?.hex_id;
    const layerTypeDefs = {
        point: {
            Layer: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$layers$2f$dist$2f$geojson$2d$layer$2f$geojson$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__GeoJsonLayer$3e$__["GeoJsonLayer"],
            propMap: {
                columns: {
                    altitude: (x)=>({
                            parameters: {
                                depthWriteEnabled: Boolean(x)
                            }
                        })
                },
                visConfig: {
                    outline: 'stroked'
                }
            }
        },
        geojson: {
            Layer: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$layers$2f$dist$2f$geojson$2d$layer$2f$geojson$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__GeoJsonLayer$3e$__["GeoJsonLayer"]
        },
        grid: {
            Layer: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$aggregation$2d$layers$2f$dist$2f$grid$2d$layer$2f$grid$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__GridLayer$3e$__["GridLayer"],
            propMap: {
                visConfig: {
                    ...aggregationVisConfig,
                    worldUnitSize: (x)=>({
                            cellSize: 1000 * x
                        })
                }
            },
            defaultProps: {
                getPosition
            }
        },
        heatmap: {
            Layer: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$aggregation$2d$layers$2f$dist$2f$heatmap$2d$layer$2f$heatmap$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__HeatmapLayer$3e$__["HeatmapLayer"],
            propMap: {
                visConfig: {
                    ...aggregationVisConfig,
                    radius: 'radiusPixels'
                }
            },
            defaultProps: {
                getPosition
            }
        },
        hexagon: {
            Layer: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$aggregation$2d$layers$2f$dist$2f$hexagon$2d$layer$2f$hexagon$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__HexagonLayer$3e$__["HexagonLayer"],
            propMap: {
                visConfig: {
                    ...aggregationVisConfig,
                    worldUnitSize: (x)=>({
                            radius: 1000 * x
                        })
                }
            },
            defaultProps: {
                getPosition
            }
        },
        hexagonId: {
            Layer: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$geo$2d$layers$2f$dist$2f$h3$2d$layers$2f$h3$2d$hexagon$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__H3HexagonLayer$3e$__["H3HexagonLayer"],
            propMap: {
                visConfig: {
                    coverage: 'coverage'
                }
            },
            defaultProps: {
                getHexagon: (d)=>d[hexagonId],
                stroked: false
            }
        }
    };
    const layer = layerTypeDefs[type];
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["assert"])(layer, `Unsupported layer type: ${type}`);
    return {
        ...layer,
        propMap: mergePropMaps(basePropMap, layer.propMap),
        defaultProps: {
            ...defaultProps,
            ...layer.defaultProps
        }
    };
}
function getTileLayer(dataset, basePropMap, type) {
    const { aggregationExp, aggregationResLevel } = dataset;
    return {
        Layer: TILE_LAYER_TYPE_TO_LAYER[type] || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$vector$2d$tile$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"],
        propMap: basePropMap,
        defaultProps: {
            ...defaultProps,
            ...aggregationExp && {
                aggregationExp
            },
            ...aggregationResLevel && {
                aggregationResLevel
            },
            uniqueIdProperty: 'geoid'
        }
    };
}
function domainFromAttribute(attribute, scaleType, scaleLength) {
    if (scaleType === 'ordinal' || scaleType === 'point') {
        return attribute.categories.map((c)=>c.category).filter((c)=>c !== undefined && c !== null);
    }
    if (scaleType === 'quantile' && attribute.quantiles) {
        return attribute.quantiles.global ? attribute.quantiles.global[scaleLength] : attribute.quantiles[scaleLength];
    }
    let { min } = attribute;
    if (scaleType === 'log' && min === 0) {
        min = 1e-5;
    }
    return [
        min,
        attribute.max
    ];
}
function domainFromValues(values, scaleType) {
    if (scaleType === 'ordinal' || scaleType === 'point') {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$d3$2d$array$2f$src$2f$groupSort$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__groupSort$3e$__["groupSort"])(values, (g)=>-g.length, (d)=>d);
    } else if (scaleType === 'quantile') {
        return values.sort((a, b)=>a - b);
    } else if (scaleType === 'log') {
        const [d0, d1] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$d3$2d$array$2f$src$2f$extent$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__extent$3e$__["extent"])(values);
        return [
            d0 === 0 ? 1e-5 : d0,
            d1
        ];
    }
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$d3$2d$array$2f$src$2f$extent$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__extent$3e$__["extent"])(values);
}
function calculateDomain(data, name, scaleType, scaleLength) {
    if (data.tilestats) {
        // Tileset data type
        const { attributes } = data.tilestats.layers[0];
        const attribute = attributes.find((a)=>a.attribute === name);
        return domainFromAttribute(attribute, scaleType, scaleLength);
    } else if (data.features) {
        // GeoJSON data type
        const values = data.features.map(({ properties })=>properties[name]);
        return domainFromValues(values, scaleType);
    } else if (Array.isArray(data) && data[0][name] !== undefined) {
        // JSON data type
        const values = data.map((properties)=>properties[name]);
        return domainFromValues(values, scaleType);
    }
    return [
        0,
        1
    ];
}
function normalizeAccessor(accessor, data) {
    if (data.features || data.tilestats) {
        return (object, info)=>{
            if (object) {
                return accessor(object.properties || object.__source.object.properties);
            }
            const { data, index } = info;
            const proxy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["createBinaryProxy"])(data, index);
            return accessor(proxy);
        };
    }
    return accessor;
}
function opacityToAlpha(opacity) {
    return opacity !== undefined ? Math.round(255 * Math.pow(opacity, 1 / 2.2)) : 255;
}
function getAccessorKeys(name, aggregation) {
    let keys = [
        name
    ];
    if (aggregation) {
        // Snowflake will capitalized the keys, need to check lower and upper case version
        keys = keys.concat([
            aggregation,
            aggregation.toUpperCase()
        ].map((a)=>`${name}_${a}`));
    }
    return keys;
}
function findAccessorKey(keys, properties) {
    for (const key of keys){
        if (key in properties) {
            return [
                key
            ];
        }
    }
    throw new Error(`Could not find property for any accessor key: ${keys}`);
}
function getColorValueAccessor({ name }, colorAggregation, data) {
    const aggregator = AGGREGATION_FUNC[colorAggregation];
    const accessor = (values)=>aggregator(values, (p)=>p[name]);
    return normalizeAccessor(accessor, data);
}
function getColorAccessor({ name, colorColumn }, scaleType, { aggregation, range }, opacity, data) {
    const scale = calculateLayerScale(colorColumn || name, scaleType, range, data);
    const alpha = opacityToAlpha(opacity);
    let accessorKeys = getAccessorKeys(name, aggregation);
    const accessor = (properties)=>{
        if (!(accessorKeys[0] in properties)) {
            accessorKeys = findAccessorKey(accessorKeys, properties);
        }
        const propertyValue = properties[accessorKeys[0]];
        const { r, g, b } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$d3$2d$color$2f$src$2f$color$2e$js__$5b$client$5d$__$28$ecmascript$29$__["rgb"])(scale(propertyValue));
        return [
            r,
            g,
            b,
            propertyValue === null ? 0 : alpha
        ];
    };
    return normalizeAccessor(accessor, data);
}
function calculateLayerScale(name, scaleType, range, data) {
    const scale = SCALE_FUNCS[scaleType]();
    let domain = [];
    let scaleColor = [];
    if (scaleType !== 'identity') {
        const { colorMap, colors } = range;
        if (Array.isArray(colorMap)) {
            colorMap.forEach(([value, color])=>{
                domain.push(value);
                scaleColor.push(color);
            });
        } else {
            domain = calculateDomain(data, name, scaleType, colors.length);
            scaleColor = colors;
        }
        if (scaleType === 'ordinal') {
            domain = domain.slice(0, scaleColor.length);
        }
    }
    scale.domain(domain);
    scale.range(scaleColor);
    scale.unknown(UNKNOWN_COLOR);
    return scale;
}
const FALLBACK_ICON = 'data:image/svg+xml;charset=utf-8;base64,PHN2ZyB2aWV3Qm94PSIwIDAgMTAwIDEwMCIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj4NCiAgPGNpcmNsZSBjeD0iNTAiIGN5PSI1MCIgcj0iNTAiLz4NCjwvc3ZnPg==';
function getIconUrlAccessor(field, range, { fallbackUrl, maxIconSize, useMaskedIcons }, data) {
    const urlToUnpackedIcon = (url)=>({
            id: `${url}@@${maxIconSize}`,
            url,
            width: maxIconSize,
            height: maxIconSize,
            mask: useMaskedIcons
        });
    let unknownValue = fallbackUrl || FALLBACK_ICON;
    if (range?.othersMarker) {
        unknownValue = range.othersMarker;
    }
    const unknownIcon = urlToUnpackedIcon(unknownValue);
    if (!range || !field) {
        return ()=>unknownIcon;
    }
    const mapping = {};
    for (const { value, markerUrl } of range.markerMap){
        if (markerUrl) {
            mapping[value] = urlToUnpackedIcon(markerUrl);
        }
    }
    const accessor = (properties)=>{
        const propertyValue = properties[field.name];
        return mapping[propertyValue] || unknownIcon;
    };
    return normalizeAccessor(accessor, data);
}
function getMaxMarkerSize(visConfig, visualChannels) {
    const { radiusRange, radius } = visConfig;
    const { radiusField, sizeField } = visualChannels;
    const field = radiusField || sizeField;
    return Math.ceil(radiusRange && field ? radiusRange[1] : radius);
}
function negateAccessor(accessor) {
    return typeof accessor === 'function' ? (d, i)=>-accessor(d, i) : -accessor;
}
function getSizeAccessor({ name }, scaleType, aggregation, range, data) {
    const scale = scaleType ? SCALE_FUNCS[scaleType]() : identity;
    if (scaleType) {
        if (aggregation !== 'count') {
            scale.domain(calculateDomain(data, name, scaleType));
        }
        scale.range(range);
    }
    let accessorKeys = getAccessorKeys(name, aggregation);
    const accessor = (properties)=>{
        if (!(accessorKeys[0] in properties)) {
            accessorKeys = findAccessorKey(accessorKeys, properties);
        }
        const propertyValue = properties[accessorKeys[0]];
        return scale(propertyValue);
    };
    return normalizeAccessor(accessor, data);
}
const FORMATS = {
    date: (s)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$moment$2d$timezone$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"].utc(s).format('MM/DD/YY HH:mm:ssa'),
    integer: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$d3$2d$format$2f$src$2f$defaultLocale$2e$js__$5b$client$5d$__$28$ecmascript$29$__["format"])('i'),
    float: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$d3$2d$format$2f$src$2f$defaultLocale$2e$js__$5b$client$5d$__$28$ecmascript$29$__["format"])('.5f'),
    timestamp: (s)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$moment$2d$timezone$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"].utc(s).format('X'),
    default: String
};
function getTextAccessor({ name, type }, data) {
    const format = FORMATS[type] || FORMATS.default;
    const accessor = (properties)=>{
        return format(properties[name]);
    };
    return normalizeAccessor(accessor, data);
}
;
 //# sourceMappingURL=layer-map.js.map
}}),
"[project]/node_modules/@deck.gl/carto/dist/api/parse-map.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_context__.s({
    "parseMap": (()=>parseMap)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$log$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__log$3e$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/core/dist/utils/log.js [client] (ecmascript) <export default as log>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$api$2f$layer$2d$map$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/api/layer-map.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/utils.js [client] (ecmascript)");
;
;
;
function parseMap(json) {
    const { keplerMapConfig, datasets, token } = json;
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["assert"])(keplerMapConfig.version === 'v1', 'Only support Kepler v1');
    const { mapState, mapStyle } = keplerMapConfig.config;
    const { layers, layerBlending, interactionConfig } = keplerMapConfig.config.visState;
    return {
        id: json.id,
        title: json.title,
        description: json.description,
        createdAt: json.createdAt,
        updatedAt: json.updatedAt,
        initialViewState: mapState,
        /** @deprecated Use `basemap`. */ mapStyle,
        token,
        layers: layers.reverse().map(({ id, type, config, visualChannels })=>{
            try {
                const { dataId } = config;
                const dataset = datasets.find((d)=>d.id === dataId);
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["assert"])(dataset, `No dataset matching dataId: ${dataId}`);
                const { data } = dataset;
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["assert"])(data, `No data loaded for dataId: ${dataId}`);
                const { Layer, propMap, defaultProps } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$api$2f$layer$2d$map$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getLayer"])(type, config, dataset);
                const styleProps = createStyleProps(config, propMap);
                return new Layer({
                    id,
                    data,
                    ...defaultProps,
                    ...createInteractionProps(interactionConfig),
                    ...styleProps,
                    ...createChannelProps(id, type, config, visualChannels, data),
                    ...createParametersProp(layerBlending, styleProps.parameters || {}),
                    ...createLoadOptions(token)
                });
            } catch (e) {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$core$2f$dist$2f$utils$2f$log$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$export__default__as__log$3e$__["log"].error(e.message)();
                return undefined;
            }
        })
    };
}
function createParametersProp(layerBlending, parameters) {
    if (layerBlending === 'additive') {
        parameters.blendColorSrcFactor = parameters.blendAlphaSrcFactor = 'src-alpha';
        parameters.blendColorDstFactor = parameters.blendAlphaDstFactor = 'dst-alpha';
        parameters.blendColorOperation = parameters.blendAlphaOperation = 'add';
    } else if (layerBlending === 'subtractive') {
        parameters.blendColorSrcFactor = 'one';
        parameters.blendColorDstFactor = 'one-minus-dst-color';
        parameters.blendAlphaSrcFactor = 'src-alpha';
        parameters.blendAlphaDstFactor = 'dst-alpha';
        parameters.blendColorOperation = 'subtract';
        parameters.blendAlphaOperation = 'add';
    }
    return Object.keys(parameters).length ? {
        parameters
    } : {};
}
function createInteractionProps(interactionConfig) {
    const pickable = interactionConfig && interactionConfig.tooltip.enabled;
    return {
        autoHighlight: pickable,
        pickable
    };
}
function mapProps(source, target, mapping) {
    for(const sourceKey in mapping){
        const sourceValue = source[sourceKey];
        const targetKey = mapping[sourceKey];
        if (sourceValue === undefined) {
            continue;
        }
        if (typeof targetKey === 'string') {
            target[targetKey] = sourceValue;
        } else if (typeof targetKey === 'function') {
            const [key, value] = Object.entries(targetKey(sourceValue))[0];
            target[key] = value;
        } else if (typeof targetKey === 'object') {
            // Nested definition, recurse down one level (also handles arrays)
            mapProps(sourceValue, target, targetKey);
        }
    }
}
function createStyleProps(config, mapping) {
    const result = {};
    mapProps(config, result, mapping);
    // Kepler format sometimes omits strokeColor. TODO: remove once we can rely on
    // `strokeColor` always being set when `stroke: true`.
    if (result.stroked && !result.getLineColor) {
        result.getLineColor = result.getFillColor;
    }
    for(const colorAccessor in __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$api$2f$layer$2d$map$2e$js__$5b$client$5d$__$28$ecmascript$29$__["OPACITY_MAP"]){
        if (Array.isArray(result[colorAccessor])) {
            const color = [
                ...result[colorAccessor]
            ];
            const opacityKey = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$api$2f$layer$2d$map$2e$js__$5b$client$5d$__$28$ecmascript$29$__["OPACITY_MAP"][colorAccessor];
            const opacity = config.visConfig[opacityKey];
            color[3] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$api$2f$layer$2d$map$2e$js__$5b$client$5d$__$28$ecmascript$29$__["opacityToAlpha"])(opacity);
            result[colorAccessor] = color;
        }
    }
    result.highlightColor = config.visConfig.enable3d ? [
        255,
        255,
        255,
        60
    ] : [
        252,
        242,
        26,
        255
    ];
    return result;
}
/* eslint-disable complexity, max-statements */ function createChannelProps(id, type, config, visualChannels, data) {
    const { colorField, colorScale, radiusField, radiusScale, sizeField, sizeScale, strokeColorField, strokeColorScale, weightField } = visualChannels;
    let { heightField, heightScale } = visualChannels;
    if (type === 'hexagonId') {
        heightField = sizeField;
        heightScale = sizeScale;
    }
    const { textLabel, visConfig } = config;
    const result = {};
    if (type === 'grid' || type === 'hexagon') {
        result.colorScaleType = colorScale;
        if (colorField) {
            const { colorAggregation } = config.visConfig;
            if (!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$api$2f$layer$2d$map$2e$js__$5b$client$5d$__$28$ecmascript$29$__["AGGREGATION"][colorAggregation]) {
                result.getColorValue = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$api$2f$layer$2d$map$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getColorValueAccessor"])(colorField, colorAggregation, data);
            } else {
                result.getColorWeight = (d)=>d[colorField.name];
            }
        }
    } else if (colorField) {
        const { colorAggregation: aggregation, colorRange: range } = visConfig;
        result.getFillColor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$api$2f$layer$2d$map$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getColorAccessor"])(colorField, // @ts-ignore
        colorScale, {
            aggregation,
            range
        }, visConfig.opacity, data);
    }
    if (type === 'point') {
        const altitude = config.columns?.altitude;
        if (altitude) {
            result.dataTransform = (data)=>{
                data.features.forEach(({ geometry, properties })=>{
                    const { type, coordinates } = geometry;
                    if (type === 'Point') {
                        coordinates[2] = properties[altitude];
                    }
                });
                return data;
            };
        }
    }
    if (radiusField || sizeField) {
        result.getPointRadius = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$api$2f$layer$2d$map$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getSizeAccessor"])(// @ts-ignore
        radiusField || sizeField, // @ts-ignore
        radiusScale || sizeScale, visConfig.sizeAggregation, visConfig.radiusRange || visConfig.sizeRange, data);
    }
    if (strokeColorField) {
        const fallbackOpacity = type === 'point' ? visConfig.opacity : 1;
        const opacity = visConfig.strokeOpacity !== undefined ? visConfig.strokeOpacity : fallbackOpacity;
        const { strokeColorAggregation: aggregation, strokeColorRange: range } = visConfig;
        result.getLineColor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$api$2f$layer$2d$map$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getColorAccessor"])(strokeColorField, // @ts-ignore
        strokeColorScale, // @ts-ignore
        {
            aggregation,
            range
        }, opacity, data);
    }
    if (heightField && visConfig.enable3d) {
        result.getElevation = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$api$2f$layer$2d$map$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getSizeAccessor"])(heightField, // @ts-ignore
        heightScale, visConfig.heightAggregation, visConfig.heightRange || visConfig.sizeRange, data);
    }
    if (weightField) {
        result.getWeight = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$api$2f$layer$2d$map$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getSizeAccessor"])(weightField, undefined, visConfig.weightAggregation, undefined, data);
    }
    if (visConfig.customMarkers) {
        const maxIconSize = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$api$2f$layer$2d$map$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getMaxMarkerSize"])(visConfig, visualChannels);
        const { getPointRadius, getFillColor } = result;
        const { customMarkersUrl, customMarkersRange, filled: useMaskedIcons } = visConfig;
        result.pointType = 'icon';
        result.getIcon = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$api$2f$layer$2d$map$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getIconUrlAccessor"])(visualChannels.customMarkersField, customMarkersRange, {
            fallbackUrl: customMarkersUrl,
            maxIconSize,
            useMaskedIcons
        }, data);
        result._subLayerProps = {
            'points-icon': {
                loadOptions: {
                    image: {
                        type: 'imagebitmap'
                    },
                    imagebitmap: {
                        resizeWidth: maxIconSize,
                        resizeHeight: maxIconSize,
                        resizeQuality: 'high'
                    }
                }
            }
        };
        if (getFillColor && useMaskedIcons) {
            result.getIconColor = getFillColor;
        }
        if (getPointRadius) {
            result.getIconSize = getPointRadius;
        }
        if (visualChannels.rotationField) {
            result.getIconAngle = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$api$2f$layer$2d$map$2e$js__$5b$client$5d$__$28$ecmascript$29$__["negateAccessor"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$api$2f$layer$2d$map$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getSizeAccessor"])(visualChannels.rotationField, undefined, null, undefined, data));
        }
    } else if (type === 'point' || type === 'tileset') {
        result.pointType = 'circle';
    }
    if (textLabel && textLabel.length && textLabel[0].field) {
        const [mainLabel, secondaryLabel] = textLabel;
        const collisionGroup = id;
        ({ alignment: result.getTextAlignmentBaseline, anchor: result.getTextAnchor, color: result.getTextColor, outlineColor: result.textOutlineColor, size: result.textSizeScale } = mainLabel);
        const { color: getSecondaryColor, field: secondaryField, outlineColor: secondaryOutlineColor, size: secondarySizeScale } = secondaryLabel || {};
        result.getText = mainLabel.field && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$api$2f$layer$2d$map$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getTextAccessor"])(mainLabel.field, data);
        const getSecondaryText = secondaryField && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$api$2f$layer$2d$map$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getTextAccessor"])(secondaryField, data);
        result.pointType = `${result.pointType}+text`;
        result.textCharacterSet = 'auto';
        result.textFontFamily = 'Inter, sans';
        result.textFontSettings = {
            sdf: true
        };
        result.textFontWeight = 600;
        result.textOutlineWidth = 3;
        result._subLayerProps = {
            ...result._subLayerProps,
            'points-text': {
                // The following props are injected by default by VectorTileLayer:
                // type: PointLabelLayer,
                // extensions: [new CollisionFilterExtension()],
                collisionEnabled: true,
                collisionGroup,
                // getPointRadius already has radiusScale baked in, so only pass one or the other
                ...result.getPointRadius ? {
                    getRadius: result.getPointRadius
                } : {
                    radiusScale: visConfig.radius
                },
                ...secondaryField && {
                    getSecondaryText,
                    getSecondaryColor,
                    secondarySizeScale,
                    secondaryOutlineColor
                }
            }
        };
    }
    return result;
}
function createLoadOptions(accessToken) {
    return {
        loadOptions: {
            fetch: {
                headers: {
                    Authorization: `Bearer ${accessToken}`
                }
            }
        }
    };
} //# sourceMappingURL=parse-map.js.map
}}),
"[project]/node_modules/@deck.gl/carto/dist/api/basemap.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_context__.s({
    "fetchBasemapProps": (()=>fetchBasemapProps)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$basemap$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/basemap.js [client] (ecmascript)");
;
const CUSTOM_STYLE_ID_PREFIX = 'custom:';
const DEFAULT_CARTO_STYLE = 'positron';
function mapLibreViewpros(config) {
    const { longitude, latitude, ...rest } = config.mapState;
    return {
        center: [
            longitude,
            latitude
        ],
        ...rest
    };
}
async function fetchBasemapProps({ config, errorContext, applyLayerFilters = true }) {
    const { mapStyle } = config;
    const styleType = mapStyle.styleType || DEFAULT_CARTO_STYLE;
    if (styleType.startsWith(CUSTOM_STYLE_ID_PREFIX)) {
        const currentCustomStyle = config.customBaseMaps?.customStyle;
        if (currentCustomStyle) {
            return {
                type: 'maplibre',
                props: {
                    style: currentCustomStyle.style || currentCustomStyle.url,
                    ...mapLibreViewpros(config)
                },
                attribution: currentCustomStyle.customAttribution
            };
        }
    }
    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$basemap$2e$js__$5b$client$5d$__$28$ecmascript$29$__["CARTO_MAP_STYLES"].includes(styleType)) {
        const { visibleLayerGroups } = mapStyle;
        const styleUrl = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$basemap$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getStyleUrl"])(styleType);
        let style = styleUrl;
        let rawStyle = styleUrl;
        if (applyLayerFilters && visibleLayerGroups && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$basemap$2e$js__$5b$client$5d$__$28$ecmascript$29$__["someLayerGroupsDisabled"])(visibleLayerGroups)) {
            rawStyle = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$basemap$2e$js__$5b$client$5d$__$28$ecmascript$29$__["fetchStyle"])({
                styleUrl,
                errorContext
            });
            style = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$basemap$2e$js__$5b$client$5d$__$28$ecmascript$29$__["applyLayerGroupFilters"])(rawStyle, visibleLayerGroups);
        }
        return {
            type: 'maplibre',
            props: {
                style,
                ...mapLibreViewpros(config)
            },
            visibleLayerGroups,
            rawStyle
        };
    }
    const googleBasemapDef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$basemap$2e$js__$5b$client$5d$__$28$ecmascript$29$__["GOOGLE_BASEMAPS"][styleType];
    if (googleBasemapDef) {
        const { mapState } = config;
        return {
            type: 'google-maps',
            props: {
                ...googleBasemapDef,
                center: {
                    lat: mapState.latitude,
                    lng: mapState.longitude
                },
                zoom: mapState.zoom + 1,
                tilt: mapState.pitch,
                heading: mapState.bearing
            }
        };
    }
    return {
        type: 'maplibre',
        props: {
            style: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$basemap$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getStyleUrl"])(DEFAULT_CARTO_STYLE),
            ...mapLibreViewpros(config)
        }
    };
} //# sourceMappingURL=basemap.js.map
}}),
"[project]/node_modules/@deck.gl/carto/dist/api/fetch-map.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
__turbopack_context__.s({
    "fetchMap": (()=>fetchMap)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$carto$2f$api$2d$client$2f$build$2f$api$2d$client$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@carto/api-client/build/api-client.modern.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$api$2f$parse$2d$map$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/api/parse-map.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/utils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$api$2f$basemap$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/api/basemap.js [client] (ecmascript)");
;
;
;
;
/* global clearInterval, setInterval, URL */ /* eslint-disable complexity, max-statements, max-params */ async function _fetchMapDataset(dataset, context) {
    const { aggregationExp, aggregationResLevel, connectionName, columns, format, geoColumn, source, type, queryParameters } = dataset;
    const cache = {};
    const globalOptions = {
        ...context,
        cache,
        connectionName,
        format
    };
    if (type === 'tileset') {
        // TODO do we want a generic tilesetSource?
        // @ts-ignore
        dataset.data = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$carto$2f$api$2d$client$2f$build$2f$api$2d$client$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["vectorTilesetSource"])({
            ...globalOptions,
            tableName: source
        });
    } else {
        const [spatialDataType, spatialDataColumn] = geoColumn ? geoColumn.split(':') : [
            'geom'
        ];
        if (spatialDataType === 'geom') {
            const options = {
                ...globalOptions,
                spatialDataColumn
            };
            if (type === 'table') {
                dataset.data = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$carto$2f$api$2d$client$2f$build$2f$api$2d$client$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["vectorTableSource"])({
                    ...options,
                    columns,
                    tableName: source
                });
            } else if (type === 'query') {
                dataset.data = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$carto$2f$api$2d$client$2f$build$2f$api$2d$client$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["vectorQuerySource"])({
                    ...options,
                    columns,
                    sqlQuery: source,
                    queryParameters
                });
            }
        } else if (spatialDataType === 'h3') {
            const options = {
                ...globalOptions,
                aggregationExp,
                aggregationResLevel,
                spatialDataColumn
            };
            if (type === 'table') {
                dataset.data = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$carto$2f$api$2d$client$2f$build$2f$api$2d$client$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["h3TableSource"])({
                    ...options,
                    tableName: source
                });
            } else if (type === 'query') {
                dataset.data = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$carto$2f$api$2d$client$2f$build$2f$api$2d$client$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["h3QuerySource"])({
                    ...options,
                    sqlQuery: source,
                    queryParameters
                });
            }
        } else if (spatialDataType === 'quadbin') {
            const options = {
                ...globalOptions,
                aggregationExp,
                aggregationResLevel,
                spatialDataColumn
            };
            if (type === 'table') {
                dataset.data = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$carto$2f$api$2d$client$2f$build$2f$api$2d$client$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["quadbinTableSource"])({
                    ...options,
                    tableName: source
                });
            } else if (type === 'query') {
                dataset.data = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$carto$2f$api$2d$client$2f$build$2f$api$2d$client$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["quadbinQuerySource"])({
                    ...options,
                    sqlQuery: source,
                    queryParameters
                });
            }
        }
    }
    let cacheChanged = true;
    if (cache.value) {
        cacheChanged = dataset.cache !== cache.value;
        dataset.cache = cache.value;
    }
    return cacheChanged;
}
async function _fetchTilestats(attribute, dataset, context) {
    const { connectionName, data, id, source, type, queryParameters } = dataset;
    const { apiBaseUrl } = context;
    const errorContext = {
        requestType: 'Tile stats',
        connection: connectionName,
        type,
        source
    };
    if (!('tilestats' in data)) {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$carto$2f$api$2d$client$2f$build$2f$api$2d$client$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["CartoAPIError"](new Error(`Invalid dataset for tilestats: ${id}`), errorContext);
    }
    const baseUrl = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$carto$2f$api$2d$client$2f$build$2f$api$2d$client$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["buildStatsUrl"])({
        attribute,
        apiBaseUrl,
        ...dataset
    });
    const client = new URLSearchParams(data.tiles[0]).get('client');
    const headers = {
        Authorization: `Bearer ${context.accessToken}`
    };
    const parameters = {};
    if (client) {
        parameters.client = client;
    }
    if (type === 'query') {
        parameters.q = source;
        if (queryParameters) {
            parameters.queryParameters = JSON.stringify(queryParameters);
        }
    }
    const stats = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$carto$2f$api$2d$client$2f$build$2f$api$2d$client$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["requestWithParameters"])({
        baseUrl,
        headers,
        parameters,
        errorContext,
        maxLengthURL: context.maxLengthURL
    });
    // Replace tilestats for attribute with value from API
    const { attributes } = data.tilestats.layers[0];
    const index = attributes.findIndex((d)=>d.attribute === attribute);
    attributes[index] = stats;
    return true;
}
async function fillInMapDatasets({ datasets }, context) {
    const promises = datasets.map((dataset)=>_fetchMapDataset(dataset, context));
    return await Promise.all(promises);
}
async function fillInTileStats({ datasets, keplerMapConfig }, context) {
    const attributes = [];
    const { layers } = keplerMapConfig.config.visState;
    for (const layer of layers){
        for (const channel of Object.keys(layer.visualChannels)){
            const attribute = layer.visualChannels[channel]?.name;
            if (attribute) {
                const dataset = datasets.find((d)=>d.id === layer.config.dataId);
                if (dataset && dataset.type !== 'tileset' && dataset.data.tilestats) {
                    // Only fetch stats for QUERY & TABLE map types
                    attributes.push({
                        attribute,
                        dataset
                    });
                }
            }
        }
    }
    // Remove duplicates to avoid repeated requests
    const filteredAttributes = [];
    for (const a of attributes){
        if (!filteredAttributes.find(({ attribute, dataset })=>attribute === a.attribute && dataset === a.dataset)) {
            filteredAttributes.push(a);
        }
    }
    const promises = filteredAttributes.map(({ attribute, dataset })=>_fetchTilestats(attribute, dataset, context));
    return await Promise.all(promises);
}
async function fetchMap({ accessToken, apiBaseUrl = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$carto$2f$api$2d$client$2f$build$2f$api$2d$client$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["DEFAULT_API_BASE_URL"], cartoMapId, clientId, headers, autoRefresh, onNewData, maxLengthURL }) {
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["assert"])(cartoMapId, 'Must define CARTO map id: fetchMap({cartoMapId: "XXXX-XXXX-XXXX"})');
    if (accessToken) {
        headers = {
            Authorization: `Bearer ${accessToken}`,
            ...headers
        };
    }
    if (autoRefresh || onNewData) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["assert"])(onNewData, 'Must define `onNewData` when using autoRefresh');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["assert"])(typeof onNewData === 'function', '`onNewData` must be a function');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["assert"])(typeof autoRefresh === 'number' && autoRefresh > 0, '`autoRefresh` must be a positive number');
    }
    const baseUrl = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$carto$2f$api$2d$client$2f$build$2f$api$2d$client$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["buildPublicMapUrl"])({
        apiBaseUrl,
        cartoMapId
    });
    const errorContext = {
        requestType: 'Public map',
        mapId: cartoMapId
    };
    const map = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$carto$2f$api$2d$client$2f$build$2f$api$2d$client$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["requestWithParameters"])({
        baseUrl,
        headers,
        errorContext,
        maxLengthURL
    });
    const context = {
        accessToken: map.token || accessToken,
        apiBaseUrl,
        clientId,
        headers,
        maxLengthURL
    };
    // Periodically check if the data has changed. Note that this
    // will not update when a map is published.
    let stopAutoRefresh;
    if (autoRefresh) {
        // eslint-disable-next-line @typescript-eslint/no-misused-promises
        const intervalId = setInterval(async ()=>{
            const changed = await fillInMapDatasets(map, {
                ...context,
                headers: {
                    ...headers,
                    'If-Modified-Since': new Date().toUTCString()
                }
            });
            if (onNewData && changed.some((v)=>v === true)) {
                onNewData((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$api$2f$parse$2d$map$2e$js__$5b$client$5d$__$28$ecmascript$29$__["parseMap"])(map));
            }
        }, autoRefresh * 1000);
        stopAutoRefresh = ()=>{
            clearInterval(intervalId);
        };
    }
    const geojsonLayers = map.keplerMapConfig.config.visState.layers.filter(({ type })=>type === 'geojson' || type === 'point');
    const geojsonDatasetIds = geojsonLayers.map(({ config })=>config.dataId);
    map.datasets.forEach((dataset)=>{
        if (geojsonDatasetIds.includes(dataset.id)) {
            const { config } = geojsonLayers.find(({ config })=>config.dataId === dataset.id);
            dataset.format = 'geojson';
            // Support for very old maps. geoColumn was not stored in the past
            if (!dataset.geoColumn && config.columns.geojson) {
                dataset.geoColumn = config.columns.geojson;
            }
        }
    });
    const [basemap] = await Promise.all([
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$api$2f$basemap$2e$js__$5b$client$5d$__$28$ecmascript$29$__["fetchBasemapProps"])({
            config: map.keplerMapConfig.config,
            errorContext
        }),
        // Mutates map.datasets so that dataset.data contains data
        fillInMapDatasets(map, context)
    ]);
    // Mutates attributes in visualChannels to contain tile stats
    await fillInTileStats(map, context);
    const out = {
        ...(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$api$2f$parse$2d$map$2e$js__$5b$client$5d$__$28$ecmascript$29$__["parseMap"])(map),
        basemap,
        ...{
            stopAutoRefresh
        }
    };
    const textLayers = out.layers.filter((layer)=>{
        const pointType = layer.props.pointType || '';
        return pointType.includes('text');
    });
    /* global FontFace, window, document */ if (textLayers.length && window.FontFace && !document.fonts.check('12px Inter')) {
        // Fetch font needed for labels
        const font = new FontFace('Inter', 'url(https://fonts.gstatic.com/s/inter/v12/UcC73FwrK3iLTeHuS_fvQtMwCp50KnMa1ZL7W0Q5nw.woff2)');
        await font.load().then((f)=>document.fonts.add(f));
    }
    return out;
} //# sourceMappingURL=fetch-map.js.map
}}),
"[project]/node_modules/@deck.gl/carto/dist/index.js [client] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// deck.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
// CARTO Layers
__turbopack_context__.s({
    "CARTO_LAYERS": (()=>CARTO_LAYERS),
    "CARTO_SOURCES": (()=>CARTO_SOURCES)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$cluster$2d$tile$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/cluster-tile-layer.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$h3$2d$tile$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/h3-tile-layer.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$heatmap$2d$tile$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/heatmap-tile-layer.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$point$2d$label$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/point-label-layer.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$quadbin$2d$tile$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/quadbin-tile-layer.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$raster$2d$tile$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/raster-tile-layer.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$vector$2d$tile$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/vector-tile-layer.js [client] (ecmascript)");
// TODO(v10): Consider removing re-exports from '@carto/api-client' below.
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$carto$2f$api$2d$client$2f$build$2f$api$2d$client$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@carto/api-client/build/api-client.modern.js [client] (ecmascript)");
;
;
;
;
;
;
;
// Exports for playground/bindings
const CARTO_LAYERS = {
    ClusterTileLayer: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$cluster$2d$tile$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"],
    H3TileLayer: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$h3$2d$tile$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"],
    HeatmapTileLayer: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$heatmap$2d$tile$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"],
    PointLabelLayer: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$point$2d$label$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"],
    QuadbinTileLayer: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$quadbin$2d$tile$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"],
    RasterTileLayer: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$raster$2d$tile$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"],
    VectorTileLayer: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$vector$2d$tile$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"]
};
;
;
;
;
;
;
;
;
;
;
;
const CARTO_SOURCES = {
    boundaryQuerySource: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$carto$2f$api$2d$client$2f$build$2f$api$2d$client$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["boundaryQuerySource"],
    boundaryTableSource: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$carto$2f$api$2d$client$2f$build$2f$api$2d$client$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["boundaryTableSource"],
    h3QuerySource: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$carto$2f$api$2d$client$2f$build$2f$api$2d$client$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["h3QuerySource"],
    h3TableSource: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$carto$2f$api$2d$client$2f$build$2f$api$2d$client$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["h3TableSource"],
    h3TilesetSource: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$carto$2f$api$2d$client$2f$build$2f$api$2d$client$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["h3TilesetSource"],
    rasterSource: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$carto$2f$api$2d$client$2f$build$2f$api$2d$client$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["rasterSource"],
    quadbinQuerySource: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$carto$2f$api$2d$client$2f$build$2f$api$2d$client$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["quadbinQuerySource"],
    quadbinTableSource: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$carto$2f$api$2d$client$2f$build$2f$api$2d$client$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["quadbinTableSource"],
    quadbinTilesetSource: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$carto$2f$api$2d$client$2f$build$2f$api$2d$client$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["quadbinTilesetSource"],
    vectorQuerySource: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$carto$2f$api$2d$client$2f$build$2f$api$2d$client$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["vectorQuerySource"],
    vectorTableSource: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$carto$2f$api$2d$client$2f$build$2f$api$2d$client$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["vectorTableSource"],
    vectorTilesetSource: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$carto$2f$api$2d$client$2f$build$2f$api$2d$client$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["vectorTilesetSource"]
};
;
 //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@deck.gl/carto/dist/index.js [client] (ecmascript) <exports>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "BASEMAP": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$basemap$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"]),
    "CARTO_LAYERS": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["CARTO_LAYERS"]),
    "CARTO_SOURCES": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["CARTO_SOURCES"]),
    "CartoAPIError": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$carto$2f$api$2d$client$2f$build$2f$api$2d$client$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["CartoAPIError"]),
    "ClusterTileLayer": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$cluster$2d$tile$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"]),
    "H3TileLayer": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$h3$2d$tile$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"]),
    "HeatmapTileLayer": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$heatmap$2d$tile$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"]),
    "PointLabelLayer": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$point$2d$label$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"]),
    "QuadbinTileLayer": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$quadbin$2d$tile$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"]),
    "RasterTileLayer": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$raster$2d$tile$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"]),
    "SOURCE_DEFAULTS": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$carto$2f$api$2d$client$2f$build$2f$api$2d$client$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["SOURCE_DEFAULTS"]),
    "VectorTileLayer": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$vector$2d$tile$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"]),
    "_GOOGLE_BASEMAPS": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$basemap$2e$js__$5b$client$5d$__$28$ecmascript$29$__["GOOGLE_BASEMAPS"]),
    "_QuadbinLayer": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$quadbin$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"]),
    "_RasterLayer": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$raster$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"]),
    "_STYLE_LAYER_GROUPS": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$basemap$2e$js__$5b$client$5d$__$28$ecmascript$29$__["STYLE_LAYER_GROUPS"]),
    "_SpatialIndexTileLayer": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$spatial$2d$index$2d$tile$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"]),
    "_applyLayerGroupFilters": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$basemap$2e$js__$5b$client$5d$__$28$ecmascript$29$__["applyLayerGroupFilters"]),
    "_fetchStyle": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$basemap$2e$js__$5b$client$5d$__$28$ecmascript$29$__["fetchStyle"]),
    "_getStyleUrl": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$basemap$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getStyleUrl"]),
    "boundaryQuerySource": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$carto$2f$api$2d$client$2f$build$2f$api$2d$client$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["boundaryQuerySource"]),
    "boundaryTableSource": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$carto$2f$api$2d$client$2f$build$2f$api$2d$client$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["boundaryTableSource"]),
    "colorBins": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$style$2f$color$2d$bins$2d$style$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"]),
    "colorCategories": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$style$2f$color$2d$categories$2d$style$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"]),
    "colorContinuous": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$style$2f$color$2d$continuous$2d$style$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"]),
    "fetchBasemapProps": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$api$2f$basemap$2e$js__$5b$client$5d$__$28$ecmascript$29$__["fetchBasemapProps"]),
    "fetchMap": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$api$2f$fetch$2d$map$2e$js__$5b$client$5d$__$28$ecmascript$29$__["fetchMap"]),
    "h3QuerySource": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$carto$2f$api$2d$client$2f$build$2f$api$2d$client$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["h3QuerySource"]),
    "h3TableSource": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$carto$2f$api$2d$client$2f$build$2f$api$2d$client$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["h3TableSource"]),
    "h3TilesetSource": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$carto$2f$api$2d$client$2f$build$2f$api$2d$client$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["h3TilesetSource"]),
    "quadbinQuerySource": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$carto$2f$api$2d$client$2f$build$2f$api$2d$client$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["quadbinQuerySource"]),
    "quadbinTableSource": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$carto$2f$api$2d$client$2f$build$2f$api$2d$client$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["quadbinTableSource"]),
    "quadbinTilesetSource": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$carto$2f$api$2d$client$2f$build$2f$api$2d$client$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["quadbinTilesetSource"]),
    "query": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$carto$2f$api$2d$client$2f$build$2f$api$2d$client$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["query"]),
    "rasterSource": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$carto$2f$api$2d$client$2f$build$2f$api$2d$client$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["rasterSource"]),
    "vectorQuerySource": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$carto$2f$api$2d$client$2f$build$2f$api$2d$client$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["vectorQuerySource"]),
    "vectorTableSource": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$carto$2f$api$2d$client$2f$build$2f$api$2d$client$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["vectorTableSource"]),
    "vectorTilesetSource": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$carto$2f$api$2d$client$2f$build$2f$api$2d$client$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__["vectorTilesetSource"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$cluster$2d$tile$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/cluster-tile-layer.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$h3$2d$tile$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/h3-tile-layer.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$heatmap$2d$tile$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/heatmap-tile-layer.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$point$2d$label$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/point-label-layer.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$quadbin$2d$tile$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/quadbin-tile-layer.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$raster$2d$tile$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/raster-tile-layer.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$vector$2d$tile$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/vector-tile-layer.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$quadbin$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/quadbin-layer.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$raster$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/raster-layer.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$layers$2f$spatial$2d$index$2d$tile$2d$layer$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/layers/spatial-index-tile-layer.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$basemap$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/basemap.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$style$2f$color$2d$bins$2d$style$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/style/color-bins-style.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$style$2f$color$2d$categories$2d$style$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/style/color-categories-style.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$style$2f$color$2d$continuous$2d$style$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/style/color-continuous-style.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$api$2f$fetch$2d$map$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/api/fetch-map.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$api$2f$basemap$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/api/basemap.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$carto$2f$api$2d$client$2f$build$2f$api$2d$client$2e$modern$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@carto/api-client/build/api-client.modern.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$deck$2e$gl$2f$carto$2f$dist$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@deck.gl/carto/dist/index.js [client] (ecmascript) <locals>");
}}),
}]);

//# sourceMappingURL=node_modules_%40deck_gl_carto_dist_48d136bb._.js.map