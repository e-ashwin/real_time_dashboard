{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 17, "column": 0}, "map": {"version":3,"sources":["file://A%3A/IIST%20GEO%20INFORMATICS/2nd%20SEMESTER/IEEE%20GRSS/PS-4/proj1/frontend/components/WindHumidityMap.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { MapContainer, TileLayer, CircleMarker } from \"react-leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\n\r\nconst WindHumidityMap = () => {\r\n  const [geojsonData, setGeojsonData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const ws = new WebSocket(\"ws://localhost:8000\");\r\n\r\n    ws.onmessage = (event) => {\r\n      try {\r\n        const newData = JSON.parse(event.data);\r\n\r\n        // Ensure lat/lon exist and are valid\r\n        const lat = parseFloat(newData.lat);\r\n        const lon = parseFloat(newData.lon);\r\n        const humidity = parseFloat(newData.humidity);\r\n        const wind = parseFloat(newData.wind);\r\n\r\n        if (isNaN(lat) || isNaN(lon)) return;\r\n\r\n        setGeojsonData((prev) => [\r\n          ...prev.slice(-50), // Keep last 50 points\r\n          { lat, lon, humidity, wind },\r\n        ]);\r\n      } catch (error) {\r\n        console.error(\"Error parsing WebSocket data:\", error);\r\n      }\r\n    };\r\n\r\n    return () => ws.close();\r\n  }, []);\r\n\r\n  return (\r\n    <MapContainer\r\n      center={[20.5937, 78.9629]} // Center on India\r\n      zoom={5}\r\n      style={{ height: \"100vh\", width: \"100%\" }}\r\n    >\r\n      <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\r\n      \r\n      {/* Wind Layer (Blue) */}\r\n      {geojsonData.map((data, index) => (\r\n        <CircleMarker\r\n          key={`wind-${index}`}\r\n          center={[data.lat, data.lon]}\r\n          radius={data.wind * 0.5} // Scale based on wind\r\n          color=\"blue\"\r\n          fillOpacity={0.6}\r\n        />\r\n      ))}\r\n\r\n      {/* Humidity Layer (Green) */}\r\n      {geojsonData.map((data, index) => (\r\n        <CircleMarker\r\n          key={`humidity-${index}`}\r\n          center={[data.lat, data.lon]}\r\n          radius={data.humidity * 0.3} // Scale based on humidity\r\n          color=\"green\"\r\n          fillOpacity={0.5}\r\n        />\r\n      ))}\r\n    </MapContainer>\r\n  );\r\n};\r\n\r\nexport default WindHumidityMap;\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;;;;;;;AAGA,MAAM,kBAAkB;IACtB,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAE,EAAE;IAEjD,CAAA,GAAA,mGAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,KAAK,IAAI,UAAU;QAEzB,GAAG,SAAS,GAAG,CAAC;YACd,IAAI;gBACF,MAAM,UAAU,KAAK,KAAK,CAAC,MAAM,IAAI;gBAErC,qCAAqC;gBACrC,MAAM,MAAM,WAAW,QAAQ,GAAG;gBAClC,MAAM,MAAM,WAAW,QAAQ,GAAG;gBAClC,MAAM,WAAW,WAAW,QAAQ,QAAQ;gBAC5C,MAAM,OAAO,WAAW,QAAQ,IAAI;gBAEpC,IAAI,MAAM,QAAQ,MAAM,MAAM;gBAE9B,eAAe,CAAC,OAAS;2BACpB,KAAK,KAAK,CAAC,CAAC;wBACf;4BAAE;4BAAK;4BAAK;4BAAU;wBAAK;qBAC5B;YACH,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,iCAAiC;YACjD;QACF;QAEA,OAAO,IAAM,GAAG,KAAK;IACvB,GAAG,EAAE;IAEL,qBACE,qKAAC,gIAAA,CAAA,eAAY;QACX,QAAQ;YAAC;YAAS;SAAQ;QAC1B,MAAM;QACN,OAAO;YAAE,QAAQ;YAAS,OAAO;QAAO;;0BAExC,qKAAC,gIAAA,CAAA,YAAS;gBAAC,KAAI;;;;;;YAGd,YAAY,GAAG,CAAC,CAAC,MAAM,sBACtB,qKAAC,gIAAA,CAAA,eAAY;oBAEX,QAAQ;wBAAC,KAAK,GAAG;wBAAE,KAAK,GAAG;qBAAC;oBAC5B,QAAQ,KAAK,IAAI,GAAG;oBACpB,OAAM;oBACN,aAAa;mBAJR,CAAC,KAAK,EAAE,OAAO;;;;;YASvB,YAAY,GAAG,CAAC,CAAC,MAAM,sBACtB,qKAAC,gIAAA,CAAA,eAAY;oBAEX,QAAQ;wBAAC,KAAK,GAAG;wBAAE,KAAK,GAAG;qBAAC;oBAC5B,QAAQ,KAAK,QAAQ,GAAG;oBACxB,OAAM;oBACN,aAAa;mBAJR,CAAC,SAAS,EAAE,OAAO;;;;;;;;;;;AASlC;uCAEe","debugId":null}}]
}