{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 37, "column": 0}, "map": {"version":3,"sources":["file://A%3A/IIST%20GEO%20INFORMATICS/2nd%20SEMESTER/IEEE%20GRSS/PS-4/proj1/frontend/components/WindHumidityMap.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport DeckGL from \"@deck.gl/react\";\r\nimport { CartoLayer, setDefaultCredentials } from \"@deck.gl/carto\";\r\nimport { ScatterplotLayer } from \"@deck.gl/layers\";\r\n\r\n// Set CARTO Credentials (No API Key Required for Public Basemap)\r\nsetDefaultCredentials({\r\n  username: \"public\",\r\n  apiKey: \"default_public\"\r\n});\r\n\r\nconst INITIAL_VIEW_STATE = {\r\n  longitude: 78.9629, // Example coordinates\r\n  latitude: 20.5937,\r\n  zoom: 5,\r\n  pitch: 40,\r\n  bearing: 0,\r\n};\r\n\r\nconst WindHumidityMap = () => {\r\n  const [data, setData] = useState([]);\r\n\r\n  // Fetch real-time data from WebSocket server\r\n  useEffect(() => {\r\n    const ws = new WebSocket(\"ws://localhost:8000\");\r\n\r\n    ws.onmessage = (event) => {\r\n      const newData = JSON.parse(event.data);\r\n      setData((prevData) => [...prevData, newData]);\r\n    };\r\n\r\n    return () => ws.close();\r\n  }, []);\r\n\r\n  // Wind Layer (Lines Representing Wind)\r\n  const windLayer = new ScatterplotLayer({\r\n    id: \"wind-layer\",\r\n    data,\r\n    getPosition: (d) => [parseFloat(d.lon), parseFloat(d.lat)],\r\n    getRadius: 5000,\r\n    getColor: [0, 150, 255], // Blue color for wind\r\n    opacity: 0.7,\r\n  });\r\n\r\n  // Humidity Layer (Droplet-Like Points)\r\n  const humidityLayer = new ScatterplotLayer({\r\n    id: \"humidity-layer\",\r\n    data,\r\n    getPosition: (d) => [parseFloat(d.lon), parseFloat(d.lat)],\r\n    getRadius: (d) => d.humidity * 100, // Scale by humidity value\r\n    getColor: [0, 255, 150], // Green color for humidity\r\n    opacity: 0.5,\r\n  });\r\n\r\n  return (\r\n    <DeckGL\r\n      initialViewState={INITIAL_VIEW_STATE}\r\n      controller={true}\r\n      layers={[\r\n        new CartoLayer({\r\n          id: \"base-map\",\r\n          connection: \"bigquery\", // Public Basemap (No API key required)\r\n          type: \"tileset\",\r\n        }),\r\n        windLayer,\r\n        humidityLayer,\r\n      ]}\r\n    />\r\n  );\r\n};\r\n\r\nexport default WindHumidityMap;\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;;;;;;;;;;;;AAEA,iEAAiE;AACjE,CAAA,GAAA,0IAAA,CAAA,wBAAqB,AAAD,EAAE;IACpB,UAAU;IACV,QAAQ;AACV;AAEA,MAAM,qBAAqB;IACzB,WAAW;IACX,UAAU;IACV,MAAM;IACN,OAAO;IACP,SAAS;AACX;AAEA,MAAM,kBAAkB;IACtB,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAE,EAAE;IAEnC,6CAA6C;IAC7C,CAAA,GAAA,mGAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,KAAK,IAAI,UAAU;QAEzB,GAAG,SAAS,GAAG,CAAC;YACd,MAAM,UAAU,KAAK,KAAK,CAAC,MAAM,IAAI;YACrC,QAAQ,CAAC,WAAa;uBAAI;oBAAU;iBAAQ;QAC9C;QAEA,OAAO,IAAM,GAAG,KAAK;IACvB,GAAG,EAAE;IAEL,uCAAuC;IACvC,MAAM,YAAY,IAAI,4IAAA,CAAA,mBAAgB,CAAC;QACrC,IAAI;QACJ;QACA,aAAa,CAAC,IAAM;gBAAC,WAAW,EAAE,GAAG;gBAAG,WAAW,EAAE,GAAG;aAAE;QAC1D,WAAW;QACX,UAAU;YAAC;YAAG;YAAK;SAAI;QACvB,SAAS;IACX;IAEA,uCAAuC;IACvC,MAAM,gBAAgB,IAAI,4IAAA,CAAA,mBAAgB,CAAC;QACzC,IAAI;QACJ;QACA,aAAa,CAAC,IAAM;gBAAC,WAAW,EAAE,GAAG;gBAAG,WAAW,EAAE,GAAG;aAAE;QAC1D,WAAW,CAAC,IAAM,EAAE,QAAQ,GAAG;QAC/B,UAAU;YAAC;YAAG;YAAK;SAAI;QACvB,SAAS;IACX;IAEA,qBACE,qKAAC,0IAAA,CAAA,UAAM;QACL,kBAAkB;QAClB,YAAY;QACZ,QAAQ;YACN,IAAI,0IAAA,CAAA,aAAU,CAAC;gBACb,IAAI;gBACJ,YAAY;gBACZ,MAAM;YACR;YACA;YACA;SACD;;;;;;AAGP;uCAEe","debugId":null}}]
}