{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 37, "column": 0}, "map": {"version":3,"sources":["file://A%3A/IIST%20GEO%20INFORMATICS/2nd%20SEMESTER/IEEE%20GRSS/PS-4/proj1/frontend/components/WindHumidityMap.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport DeckGL from \"@deck.gl/react\";\r\nimport { TileLayer } from \"@deck.gl/geo-layers\";\r\nimport { ScatterplotLayer } from \"@deck.gl/layers\";\r\n\r\nconst INITIAL_VIEW_STATE = {\r\n  longitude: 78.9629, // Default India, change if needed\r\n  latitude: 20.5937,\r\n  zoom: 5,\r\n  pitch: 40,\r\n  bearing: 0,\r\n};\r\n\r\nconst WindHumidityMap = () => {\r\n  const [geojsonData, setGeojsonData] = useState({\r\n    type: \"FeatureCollection\",\r\n    features: [],\r\n  });\r\n\r\n  useEffect(() => {\r\n    const ws = new WebSocket(\"ws://localhost:8000\");\r\n\r\n    ws.onmessage = (event) => {\r\n      try {\r\n        console.log(\"Raw WebSocket Data:\", event.data);\r\n        const newData = JSON.parse(event.data);\r\n\r\n        // Trim unwanted characters (like \\r)\r\n        Object.keys(newData).forEach((key) => {\r\n          if (typeof newData[key] === \"string\") {\r\n            newData[key] = newData[key].trim();\r\n          }\r\n        });\r\n\r\n        const lat = parseFloat(newData.lat);\r\n        const lon = parseFloat(newData.lon);\r\n        const humidity = parseFloat(newData.humidity);\r\n        const wind = parseFloat(newData.wind);\r\n\r\n        if (isNaN(lat) || isNaN(lon)) {\r\n          console.warn(\"❌ Invalid lat/lon:\", newData.lat, newData.lon);\r\n          return;\r\n        }\r\n\r\n        const newFeature = {\r\n          type: \"Feature\",\r\n          geometry: {\r\n            type: \"Point\",\r\n            coordinates: [lon, lat],\r\n          },\r\n          properties: {\r\n            humidity: isNaN(humidity) ? 0 : humidity,\r\n            wind: isNaN(wind) ? 0 : wind,\r\n          },\r\n        };\r\n\r\n        setGeojsonData((prev) => ({\r\n          type: \"FeatureCollection\",\r\n          features: [...prev.features, newFeature].slice(-100), // Keep last 100 points\r\n        }));\r\n      } catch (error) {\r\n        console.error(\"❌ Error parsing WebSocket data:\", error);\r\n      }\r\n    };\r\n\r\n    return () => ws.close();\r\n  }, []);\r\n\r\n  // ✅ Ensure we don't pass an empty array (avoids \"GeoJSON does not have type\" error)\r\n  const layers = [];\r\n  if (geojsonData.features.length > 0) {\r\n    layers.push(\r\n      new ScatterplotLayer({\r\n        id: \"wind-layer\",\r\n        data: geojsonData.features,\r\n        getPosition: (d) => d.geometry.coordinates,\r\n        getRadius: 5000,\r\n        getColor: [0, 150, 255], // Blue for wind\r\n        opacity: 0.7,\r\n        pickable: true,\r\n      })\r\n    );\r\n\r\n    layers.push(\r\n      new ScatterplotLayer({\r\n        id: \"humidity-layer\",\r\n        data: geojsonData.features,\r\n        getPosition: (d) => d.geometry.coordinates,\r\n        getRadius: (d) => (d.properties.humidity || 1) * 100, // Size based on humidity\r\n        getColor: [0, 255, 150], // Green for humidity\r\n        opacity: 0.5,\r\n        pickable: true,\r\n      })\r\n    );\r\n  }\r\n\r\n  return (\r\n    <DeckGL initialViewState={INITIAL_VIEW_STATE} controller={true} layers={[\r\n        new TileLayer({\r\n          id: \"base-map\",\r\n          data: \"https://a.tile.openstreetmap.org/{z}/{x}/{y}.png\",\r\n          minZoom: 0,\r\n          maxZoom: 19,\r\n        }),\r\n        ...layers, // ✅ Only add layers if there's data\r\n      ]}\r\n    />\r\n  );\r\n};\r\n\r\nexport default WindHumidityMap;\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;;;;;;;;;;;;AAEA,MAAM,qBAAqB;IACzB,WAAW;IACX,UAAU;IACV,MAAM;IACN,OAAO;IACP,SAAS;AACX;AAEA,MAAM,kBAAkB;IACtB,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAE;QAC7C,MAAM;QACN,UAAU,EAAE;IACd;IAEA,CAAA,GAAA,mGAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,KAAK,IAAI,UAAU;QAEzB,GAAG,SAAS,GAAG,CAAC;YACd,IAAI;gBACF,QAAQ,GAAG,CAAC,uBAAuB,MAAM,IAAI;gBAC7C,MAAM,UAAU,KAAK,KAAK,CAAC,MAAM,IAAI;gBAErC,qCAAqC;gBACrC,OAAO,IAAI,CAAC,SAAS,OAAO,CAAC,CAAC;oBAC5B,IAAI,OAAO,OAAO,CAAC,IAAI,KAAK,UAAU;wBACpC,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI;oBAClC;gBACF;gBAEA,MAAM,MAAM,WAAW,QAAQ,GAAG;gBAClC,MAAM,MAAM,WAAW,QAAQ,GAAG;gBAClC,MAAM,WAAW,WAAW,QAAQ,QAAQ;gBAC5C,MAAM,OAAO,WAAW,QAAQ,IAAI;gBAEpC,IAAI,MAAM,QAAQ,MAAM,MAAM;oBAC5B,QAAQ,IAAI,CAAC,sBAAsB,QAAQ,GAAG,EAAE,QAAQ,GAAG;oBAC3D;gBACF;gBAEA,MAAM,aAAa;oBACjB,MAAM;oBACN,UAAU;wBACR,MAAM;wBACN,aAAa;4BAAC;4BAAK;yBAAI;oBACzB;oBACA,YAAY;wBACV,UAAU,MAAM,YAAY,IAAI;wBAChC,MAAM,MAAM,QAAQ,IAAI;oBAC1B;gBACF;gBAEA,eAAe,CAAC,OAAS,CAAC;wBACxB,MAAM;wBACN,UAAU;+BAAI,KAAK,QAAQ;4BAAE;yBAAW,CAAC,KAAK,CAAC,CAAC;oBAClD,CAAC;YACH,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,mCAAmC;YACnD;QACF;QAEA,OAAO,IAAM,GAAG,KAAK;IACvB,GAAG,EAAE;IAEL,oFAAoF;IACpF,MAAM,SAAS,EAAE;IACjB,IAAI,YAAY,QAAQ,CAAC,MAAM,GAAG,GAAG;QACnC,OAAO,IAAI,CACT,IAAI,4IAAA,CAAA,mBAAgB,CAAC;YACnB,IAAI;YACJ,MAAM,YAAY,QAAQ;YAC1B,aAAa,CAAC,IAAM,EAAE,QAAQ,CAAC,WAAW;YAC1C,WAAW;YACX,UAAU;gBAAC;gBAAG;gBAAK;aAAI;YACvB,SAAS;YACT,UAAU;QACZ;QAGF,OAAO,IAAI,CACT,IAAI,4IAAA,CAAA,mBAAgB,CAAC;YACnB,IAAI;YACJ,MAAM,YAAY,QAAQ;YAC1B,aAAa,CAAC,IAAM,EAAE,QAAQ,CAAC,WAAW;YAC1C,WAAW,CAAC,IAAM,CAAC,EAAE,UAAU,CAAC,QAAQ,IAAI,CAAC,IAAI;YACjD,UAAU;gBAAC;gBAAG;gBAAK;aAAI;YACvB,SAAS;YACT,UAAU;QACZ;IAEJ;IAEA,qBACE,qKAAC,0IAAA,CAAA,UAAM;QAAC,kBAAkB;QAAoB,YAAY;QAAM,QAAQ;YACpE,IAAI,0JAAA,CAAA,YAAS,CAAC;gBACZ,IAAI;gBACJ,MAAM;gBACN,SAAS;gBACT,SAAS;YACX;eACG;SACJ;;;;;;AAGP;uCAEe","debugId":null}}]
}