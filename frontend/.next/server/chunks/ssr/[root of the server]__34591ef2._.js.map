{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 85, "column": 0}, "map": {"version":3,"sources":["file://A%3A/IIST%20GEO%20INFORMATICS/2nd%20SEMESTER/IEEE%20GRSS/PS-4/proj1/frontend/pages/dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Chart, registerables } from \"chart.js\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport axios from \"axios\";\r\nimport { Container, Grid, Card, Typography, CircularProgress } from \"@mui/material\";\r\n\r\n// ✅ Register Chart.js components\r\nChart.register(...registerables);\r\n\r\nconst API_URL = \"http://localhost:8000/data\";\r\nconst WS_URL = \"ws://localhost:8000\";\r\n\r\nconst MAX_POINTS = 20; // ✅ Limit chart to last 20 points to avoid overcrowding\r\n\r\nconst Dashboard = () => {\r\n  const [data, setData] = useState([]);\r\n  const [pm25Chart, setPm25Chart] = useState(null);\r\n  const [tempChart, setTempChart] = useState(null);\r\n  const [humidityChart, setHumidityChart] = useState(null);\r\n  const [windChart, setWindChart] = useState(null);\r\n\r\n  useEffect(() => {\r\n    axios.get(API_URL).then((response) => {\r\n      const initialData = response.data.slice(-MAX_POINTS); // ✅ Load last 20 points\r\n      setData(initialData);\r\n      updateCharts(initialData);\r\n    });\r\n\r\n    const socket = new WebSocket(WS_URL);\r\n    socket.onopen = () => console.log(\"✅ WebSocket Connected\");\r\n\r\n    socket.onmessage = (event) => {\r\n      const newData = JSON.parse(event.data); // ✅ Expecting one data point at a time\r\n      setData((prevData) => {\r\n        const updatedData = [...prevData, newData].slice(-MAX_POINTS); // ✅ Append & keep last 20 points\r\n        updateCharts(updatedData);\r\n        return updatedData;\r\n      });\r\n    };\r\n\r\n    socket.onerror = (error) => console.error(\"🚨 WebSocket Error:\", error);\r\n    socket.onclose = () => console.warn(\"⚠️ WebSocket Disconnected\");\r\n\r\n    return () => socket.close();\r\n  }, []);\r\n\r\n  const updateCharts = (data) => {\r\n    const timestamps = data.map((d) => d.time);\r\n    setPm25Chart(createChartData(timestamps, data.map((d) => d.pm25), \"PM2.5 Levels\", \"red\"));\r\n    setTempChart(createChartData(timestamps, data.map((d) => d.temp), \"Temperature (°C)\", \"blue\"));\r\n    setHumidityChart(createChartData(timestamps, data.map((d) => d.humidity), \"Humidity (%)\", \"green\"));\r\n    setWindChart(createChartData(timestamps, data.map((d) => d.wind), \"Wind Speed (km/h)\", \"purple\"));\r\n  };\r\n\r\n  const createChartData = (labels, data, label, color) => ({\r\n    labels,\r\n    datasets: [{ label, data, borderColor: color, fill: false }],\r\n  });\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ py: 4 }}>\r\n      <Typography variant=\"h4\" color=\"primary\" gutterBottom textAlign=\"center\">\r\n        Real-Time Air Quality Dashboard\r\n      </Typography>\r\n\r\n      <Grid container spacing={4}>\r\n        <Grid item xs={12} md={6}>\r\n          <Card sx={{ p: 4, boxShadow: 3 }}>\r\n            <Typography variant=\"h6\" color=\"secondary\">PM2.5 Levels</Typography>\r\n            {pm25Chart ? <Line data={pm25Chart} /> : <CircularProgress />}\r\n          </Card>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} md={6}>\r\n          <Card sx={{ p: 4, boxShadow: 3 }}>\r\n            <Typography variant=\"h6\" color=\"secondary\">Temperature (°C)</Typography>\r\n            {tempChart ? <Line data={tempChart} /> : <CircularProgress />}\r\n          </Card>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} md={6}>\r\n          <Card sx={{ p: 4, boxShadow: 3 }}>\r\n            <Typography variant=\"h6\" color=\"secondary\">Humidity (%)</Typography>\r\n            {humidityChart ? <Line data={humidityChart} /> : <CircularProgress />}\r\n          </Card>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} md={6}>\r\n          <Card sx={{ p: 4, boxShadow: 3 }}>\r\n            <Typography variant=\"h6\" color=\"secondary\">Wind Speed (km/h)</Typography>\r\n            {windChart ? <Line data={windChart} /> : <CircularProgress />}\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"names":[],"mappings":"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","debugId":null}}]
}